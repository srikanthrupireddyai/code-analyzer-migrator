[
  {
    "file_path": "SakilaProject_Cloned/.mvn/wrapper/MavenWrapperDownloader.java",
    "raw_content": "/*\n * Copyright 2007-present the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.net.*;\nimport java.io.*;\nimport java.nio.channels.*;\nimport java.util.Properties;\n\npublic class MavenWrapperDownloader {\n\n    private static final String WRAPPER_VERSION = \"0.5.6\";\n    /**\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n     */\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n\n    /**\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n     * use instead of the default one.\n     */\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n            \".mvn/wrapper/maven-wrapper.properties\";\n\n    /**\n     * Path where the maven-wrapper.jar will be saved to.\n     */\n    private static final String MAVEN_WRAPPER_JAR_PATH =\n            \".mvn/wrapper/maven-wrapper.jar\";\n\n    /**\n     * Name of the property which should be used to override the default download url for the wrapper.\n     */\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n\n    public static void main(String args[]) {\n        System.out.println(\"- Downloader started\");\n        File baseDirectory = new File(args[0]);\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n        // wrapperUrl parameter.\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n        String url = DEFAULT_DOWNLOAD_URL;\n        if (mavenWrapperPropertyFile.exists()) {\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\n            try {\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n                Properties mavenWrapperProperties = new Properties();\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n            } catch (IOException e) {\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n            } finally {\n                try {\n                    if (mavenWrapperPropertyFileInputStream != null) {\n                        mavenWrapperPropertyFileInputStream.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore ...\n                }\n            }\n        }\n        System.out.println(\"- Downloading from: \" + url);\n\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n        if (!outputFile.getParentFile().exists()) {\n            if (!outputFile.getParentFile().mkdirs()) {\n                System.out.println(\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n            }\n        }\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n        try {\n            downloadFileFromURL(url, outputFile);\n            System.out.println(\"Done\");\n            System.exit(0);\n        } catch (Throwable e) {\n            System.out.println(\"- Error downloading\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n            String username = System.getenv(\"MVNW_USERNAME\");\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n            Authenticator.setDefault(new Authenticator() {\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(username, password);\n                }\n            });\n        }\n        URL website = new URL(urlString);\n        ReadableByteChannel rbc;\n        rbc = Channels.newChannel(website.openStream());\n        FileOutputStream fos = new FileOutputStream(destination);\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n        fos.close();\n        rbc.close();\n    }\n\n}\n",
    "category": "Other",
    "package_name": null,
    "class_name": "MavenWrapperDownloader",
    "class_annotations": [],
    "imports": [
      "java.net",
      "java.io",
      "java.nio.channels",
      "java.util.Properties"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "WRAPPER_VERSION",
        "type": "String"
      },
      {
        "name": "DEFAULT_DOWNLOAD_URL",
        "type": "String"
      },
      {
        "name": "MAVEN_WRAPPER_PROPERTIES_PATH",
        "type": "String"
      },
      {
        "name": "MAVEN_WRAPPER_JAR_PATH",
        "type": "String"
      },
      {
        "name": "PROPERTY_NAME_WRAPPER_URL",
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "main",
        "signature": "void main(String args)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "args",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "downloadFileFromURL",
        "signature": "void downloadFileFromURL(String urlString, File destination)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "urlString",
            "type": "String"
          },
          {
            "name": "destination",
            "type": "File"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject;\nimport com.sparta.engineering72.sakilaproject.controller.ActorController;\nimport com.sparta.engineering72.sakilaproject.controller.CategoryController;\nimport com.sparta.engineering72.sakilaproject.controller.CustomerController;\nimport com.sparta.engineering72.sakilaproject.controller.FilmController;\nimport com.sparta.engineering72.sakilaproject.entities.*;\nimport com.sparta.engineering72.sakilaproject.respositories.*;\nimport com.sparta.engineering72.sakilaproject.services.*;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.Spy;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport org.springframework.ui.ModelMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n@RunWith(MockitoJUnitRunner.Silent.class)\npublic class MockTests {\n\n\n    @Spy\n    ActorRepository actorRepository;\n    @Spy\n    FilmRepository filmRepository;\n    @Spy\n    CustomerRepository customerRepository;\n\n    @Spy\n    CategoryRepository categoryRepository;\n\n    @Spy\n    StaffRepository staffRepository;\n\n    @Spy\n    RentalRepository rentalRepository;\n\n    @Spy\n    InventoryRepository inventoryRepository;\n\n    @Spy @InjectMocks\n    ActorService actorService;\n\n    @Spy @InjectMocks\n    CategoryService categoryService;\n\n    @Spy @InjectMocks\n    FilmService filmService;\n\n    @Spy @InjectMocks\n    CustomerService customerService;\n\n    @Spy @InjectMocks\n    InventoryService inventoryService;\n\n    @Spy @InjectMocks\n    RentalService rentalService;\n\n    @InjectMocks\n    ActorController actorController;\n\n    @InjectMocks\n    FilmController filmController;\n\n    @InjectMocks\n    CategoryController categoryController;\n\n    @Before()\n    public void init() {\n        MockitoAnnotations.initMocks(this);\n    }\n    @Test\n    public void testActorById() {\n        Actor actor = new Actor();\n        actor.setActorId(10);\n        when(actorRepository.getActorByActorId(10)).thenReturn(actor);\n        Actor a = actorController.findActorById(10);\n        System.out.println(actor.getFirstName());\n        assertEquals(10, a.getActorId());\n    }\n\n    @Test\n    public void testActorByFirstName() {\n        Actor actor1 = new Actor();\n        actor1.setFirstName(\"Frank\");\n        actor1.setActorId(1);\n        when(actorRepository.getActorByActorId(1)).thenReturn((actor1));\n        Actor aa = actorController.findActorById(1);\n        assertEquals(\"Frank\", aa.getFirstName());\n    }\n\n    @Test\n    public void testActorByLastName() {\n        Actor actor2 = new Actor();\n        actor2.setLastName(\"Gomez\");\n        actor2.setActorId(2);\n        when(actorRepository.getActorByActorId(2)).thenReturn((actor2));\n        Actor aaa = actorController.findActorById(2);\n        assertEquals(\"Gomez\", aaa.getLastName());\n    }\n\n    @Test\n    public void testActorByMore() {\n        Actor actor3 = new Actor();\n        actor3.setFirstName(\"Justin\");\n        actor3.setActorId(3);\n        actor3.setLastName(\"Timberlake\");\n        when(actorRepository.getActorByActorId(3)).thenReturn((actor3));\n        Actor aaaa = actorController.findActorById(3);\n        assertEquals(\"Justin\", aaaa.getFirstName());\n        assertEquals(\"Timberlake\", aaaa.getLastName());\n    }\n\n    @Test\n    public void testActorByFullName() {\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n        Actor actor4 = new Actor();\n        actor4.setFirstName(\"Leo\");\n        actor4.setActorId(3);\n        actor4.setLastName(\"DiCaprio\");\n        actor4.setLastUpdate(timestamp);\n        when(actorRepository.getActorByActorId(3)).thenReturn((actor4));\n        Actor aaaa = actorController.findActorById(3);\n        assertEquals(timestamp.toString(),aaaa.getLastUpdate().toString());\n    }\n\n    @Test\n    public void testFilmByID() {\n        FilmActor theFilmActor = new FilmActor();\n        Actor filmActor = new Actor();\n        theFilmActor.setActorId(filmActor.getActorId());\n        Film film = new Film();\n        film.setFilmId(1);\n        when(filmRepository.getFilmByFilmId(1)).thenReturn((film));\n        Film theFilm = filmController.findFilmByID(1);\n        assertEquals(1, theFilm.getFilmId());\n    }\n\n    @Test\n    public void testFilmByDescritption() {\n        Film film = new Film();\n        film.setDescription(\"Horror\");\n        film.setFilmId(2);\n        when(filmRepository.getFilmByFilmId(2)).thenReturn((film));\n        Film theFilm = filmController.findFilmByID(2);\n        assertEquals(\"Horror\", theFilm.getDescription());\n    }\n\n    @Test\n    public void testFilmByRating() {\n        Film film = new Film();\n        film.setRating(\"18\");\n        film.setFilmId(3);\n        when(filmRepository.getFilmByFilmId(3)).thenReturn((film));\n        Film theFilm = filmController.findFilmByID(3);\n        assertEquals(\"18\", theFilm.getRating());\n    }\n\n    @Test\n    public void testFilmByLength() {\n        Film film = new Film();\n        film.setLength(200);\n        film.setFilmId(4);\n        when(filmRepository.getFilmByFilmId(4)).thenReturn((film));\n        Film theFilm = filmController.findFilmByID(4);\n        assertEquals(200, theFilm.getLength());\n    }\n\n    @Test\n    public void testFilmByName() {\n        Film film = new Film();\n        film.setTitle(\"Goodfellas\");\n        film.setFilmId(5);\n        when(filmRepository.getFilmByFilmId(5)).thenReturn((film));\n        Film theFilm = filmController.findFilmByID(5);\n        assertEquals( \"Goodfellas\" , theFilm.getTitle());\n    }\n\n    @Test\n    public void testFilmByDescription() {\n        Film film = new Film();\n        film.setDescription(\"This is a long description\");\n        film.setFilmId(5);\n        when(filmRepository.getFilmByFilmId(5)).thenReturn((film));\n        Film theFilm = film;\n        assertEquals( \"This is a long description\" , theFilm.getDescription());\n    }\n\n\n    @Test\n    public void testFilms() {\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n        Film film = new Film();\n        film.setLastUpdate(timestamp);\n        film.setTitle(\"Goodfellas\");\n        film.setFilmId(5);\n        film.setSpecialFeatures(\"Special\");\n        film.setReplacementCost(BigDecimal.valueOf(0.999));\n        film.setRentalRate(BigDecimal.valueOf(0.888));\n        film.setRentalDuration(10);\n        film.setReleaseYear(2000);\n        when(filmRepository.getFilmByFilmId(5)).thenReturn((film));\n        Film theFilm = film;\n        assertEquals( timestamp.toString() , theFilm.getLastUpdate().toString());\n        assertEquals(  10, theFilm.getRentalDuration());\n        assertEquals(  BigDecimal.valueOf(0.999), theFilm.getReplacementCost());\n        assertEquals(  BigDecimal.valueOf(0.888), theFilm.getRentalRate());\n        assertEquals(  2000, theFilm.getReleaseYear());\n    }\n\n    @Test\n    public void testCategoryById() {\n        Category category = new Category();\n        category.setCategoryId(10);\n        when(categoryRepository.getCategoryByCategoryId(10)).thenReturn((category));\n        Category secondCategory = categoryController.getCategoryById(10);\n        assertEquals( 10 , secondCategory.getCategoryId());\n    }\n\n    @Test\n    public void testCategoryByName() {\n        Category category = new Category();\n        category.setName(\"Category\");\n        category.setCategoryId(10);\n        when(categoryRepository.getCategoryByCategoryId(10)).thenReturn((category));\n        Category secondCategory = category;\n        assertEquals( 10 , secondCategory.getCategoryId());\n    }\n\n    @Test\n    public void testCustomerById() {\n        Customer customer = new Customer();\n        customer.setCustomerId(10);\n        when(customerRepository.getCustomerByCustomerId(10)).thenReturn((customer));\n        Customer secondCustomer = customer;\n        assertEquals( 10 , secondCustomer.getCustomerId());\n    }\n\n    @Test\n    public void testCustomer() {\n        Date date = new Date();\n        Customer customer = new Customer();\n        customer.setEmail(\"email\");\n        customer.setCustomerId(10);\n        customer.setCreateDate(new Timestamp(date.getTime()));\n        customer.setFirstName(\"Paul\");\n        customer.setLastName(\"Watson\");\n        when(customerRepository.getCustomerByCustomerId(10)).thenReturn((customer));\n        Customer secondCustomer = customer;\n        assertEquals( 10 , secondCustomer.getCustomerId());\n        assertEquals( \"email\" , secondCustomer.getEmail());\n        assertEquals( date , secondCustomer.getCreateDate());\n        assertEquals( \"Paul\" , secondCustomer.getFirstName());\n        assertEquals( \"Watson\" , secondCustomer.getLastName());\n\n    }\n\n    @Test\n    public void testStaff() {\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n\n        Staff staff = new Staff();\n        staff.setEmail(\"email\");\n        staff.setStaffId(10);\n        staff.setFirstName(\"Paul\");\n        staff.setLastName(\"Watson\");\n        staff.setLastUpdate(timestamp);\n        staff.setPassword(\"Password\");\n        staff.setUsername(\"Username\");\n        when(staffRepository.getStaffByUsername(\"Username\")).thenReturn((staff));\n        Staff secondStaff = staff;\n        assertEquals( 10 , secondStaff.getStaffId());\n        assertEquals( \"email\" , secondStaff.getEmail());\n        assertEquals( \"Paul\" , secondStaff.getFirstName());\n        assertEquals( \"Watson\" , secondStaff.getLastName());\n        assertEquals( timestamp.toString(), secondStaff.getLastUpdate().toString());\n        assertEquals( \"Password\" , secondStaff.getPassword());\n        assertEquals( \"Username\" , secondStaff.getUsername());\n\n    }\n\n    @Test\n    public void testFilmController() {\n        ModelMap modelMap = new ModelMap();\n        FilmController filmController = new FilmController(filmService, inventoryService, rentalService, customerService);\n        String result = filmController.getFilmDetails(modelMap , 10);\n        assertEquals( result , \"films/filmDetails\");\n    }\n\n    @Test\n    public void testFilmController2() {\n        ModelMap modelMap = new ModelMap();\n        FilmController filmController = new FilmController(filmService, inventoryService, rentalService, customerService);\n        String result = filmController.getFilms(modelMap , \"Filter\");\n        assertEquals( result ,  \"/films/films\");\n    }\n\n    @Test\n    public void testCategory() {\n        ModelMap modelMap = new ModelMap();\n        CategoryController categoryController = new CategoryController(filmService, categoryService);\n        String result = categoryController.getCategoryDetails(modelMap , 10);\n        assertEquals( result ,  \"categories/categoryDetails\");\n    }\n\n    @Test\n    public void testCategory2() {\n        ModelMap modelMap = new ModelMap();\n        CategoryController categoryController = new CategoryController(filmService, categoryService);\n        String result = categoryController.getCategories(modelMap);\n        assertEquals( result,  \"/categories/categories\");\n    }\n\n    @Test\n    public void testActorController1() {\n        ModelMap modelMap = new ModelMap();\n        ActorController actorController = new ActorController(filmService, actorService);\n        String result = actorController.getActors(modelMap , \"FirstName\" , \"LastName\");\n        assertEquals( result,   \"actors/actors\");\n    }\n\n    @Test\n    public void testCustomerController() {\n        ModelMap modelMap = new ModelMap();\n        CustomerController customerController = new CustomerController(customerService, rentalService, inventoryService, filmService);\n        String result = customerController.getCustomers(modelMap, \"ALL CUSTOMERS\", \"ALL CUSTOMERS\");\n        assertEquals( result,   \"owner/customers\");\n\n    }\n\n    @Test\n    public void testCustomerController2() {\n        ModelMap modelMap = new ModelMap();\n        CustomerController customerController = new CustomerController(customerService, rentalService, inventoryService, filmService);\n        String result = customerController.showUsersRentalHistory(modelMap , 10);\n        assertEquals( result,   \"owner/customerDetails\");\n    }\n\n    @Test\n    public void testInventory() {\n        Date date = new Date(System.currentTimeMillis());\n        Timestamp timestamp = new Timestamp(date.getTime());\n        Timestamp timestamp1 = new Timestamp(timestamp.getTime());\n        Film film = new Film();\n        film.setReleaseYear(2000);\n        film.setLastUpdate(timestamp);\n        Inventory inventory = new Inventory();\n        inventory.setFilmId(film.getFilmId());\n        inventory.setInventoryId(10);\n        inventory.setLastUpdate(timestamp1);\n        when(inventoryRepository.getInventoriesByInventoryId(10)).thenReturn((inventory));\n        Inventory secondInventory = inventory;\n        assertEquals( 10 , secondInventory.getInventoryId());\n        assertEquals( timestamp.toString() , secondInventory.getLastUpdate().toString());\n        assertEquals( timestamp1.toString() , secondInventory.getLastUpdate().toString());\n        System.out.println(date.toString());\n    }\n\n\n    @Test\n    public void testRental() {\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n        Inventory inventory = new Inventory();\n        Customer customer = new Customer();\n        customer.setFirstName(\"James\");\n        customer.setLastName(\"Peak\");\n        Staff staff = new Staff();\n        staff.setFirstName(\"Paul\");\n        staff.setLastName(\"Watson\");\n        Rental rental = new Rental();\n        rental.setRentalId(10);\n        rental.setReturnDate(timestamp);\n        rental.setRentalDate(timestamp);\n        rental.setInventoryId(inventory.getInventoryId());\n        rental.setCustomerId(customer.getCustomerId());\n        rental.setLastUpdate(timestamp);\n        rental.setStaffId(staff.getStaffId());\n\n        when(rentalRepository.getRentalByRentalId(10)).thenReturn((rental));\n        Rental secondRental = rental;\n        assertEquals( 10 , secondRental.getRentalId());\n        assertEquals( inventory.getInventoryId() , secondRental.getInventoryId());\n        assertEquals( timestamp.toString() , secondRental.getLastUpdate().toString());\n        assertEquals( customer.getCustomerId(), secondRental.getCustomerId());\n        assertEquals( staff.getStaffId(), secondRental.getStaffId());\n        assertEquals( timestamp.toString(), secondRental.getReturnDate().toString());\n        assertEquals( timestamp.toString(), secondRental.getRentalDate().toString());\n\n    }\n\n    @Test\n    public void testCategoryByTimeStamp() {\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n        Category category = new Category();\n        category.setLastUpdate(timestamp);\n        category.setCategoryId(10);\n        when(categoryRepository.getCategoryByCategoryId(10)).thenReturn((category));\n        Category secondCategory = category;\n        assertEquals( timestamp.toString() , secondCategory.getLastUpdate().toString());\n    }\n\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject",
    "class_name": "MockTests",
    "class_annotations": [
      "RunWith"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.controller.ActorController",
      "com.sparta.engineering72.sakilaproject.controller.CategoryController",
      "com.sparta.engineering72.sakilaproject.controller.CustomerController",
      "com.sparta.engineering72.sakilaproject.controller.FilmController",
      "com.sparta.engineering72.sakilaproject.entities",
      "com.sparta.engineering72.sakilaproject.respositories",
      "com.sparta.engineering72.sakilaproject.services",
      "org.junit.Before",
      "org.junit.Test",
      "org.junit.runner.RunWith",
      "org.mockito.InjectMocks",
      "org.mockito.MockitoAnnotations",
      "org.mockito.Spy",
      "org.mockito.junit.MockitoJUnitRunner",
      "java.math.BigDecimal",
      "java.sql.Timestamp",
      "java.util.Date",
      "org.springframework.ui.ModelMap",
      "org.junit.jupiter.api.Assertions.assertEquals",
      "org.mockito.Mockito.verify",
      "org.mockito.Mockito.when"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "actorRepository",
        "type": "ActorRepository"
      },
      {
        "name": "filmRepository",
        "type": "FilmRepository"
      },
      {
        "name": "customerRepository",
        "type": "CustomerRepository"
      },
      {
        "name": "categoryRepository",
        "type": "CategoryRepository"
      },
      {
        "name": "staffRepository",
        "type": "StaffRepository"
      },
      {
        "name": "rentalRepository",
        "type": "RentalRepository"
      },
      {
        "name": "inventoryRepository",
        "type": "InventoryRepository"
      },
      {
        "name": "actorService",
        "type": "ActorService"
      },
      {
        "name": "categoryService",
        "type": "CategoryService"
      },
      {
        "name": "filmService",
        "type": "FilmService"
      },
      {
        "name": "customerService",
        "type": "CustomerService"
      },
      {
        "name": "inventoryService",
        "type": "InventoryService"
      },
      {
        "name": "rentalService",
        "type": "RentalService"
      },
      {
        "name": "actorController",
        "type": "ActorController"
      },
      {
        "name": "filmController",
        "type": "FilmController"
      },
      {
        "name": "categoryController",
        "type": "CategoryController"
      }
    ],
    "methods": [
      {
        "name": "init",
        "signature": "void init()",
        "method_annotations": [
          "Before"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testActorById",
        "signature": "void testActorById()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testActorByFirstName",
        "signature": "void testActorByFirstName()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testActorByLastName",
        "signature": "void testActorByLastName()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testActorByMore",
        "signature": "void testActorByMore()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testActorByFullName",
        "signature": "void testActorByFullName()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmByID",
        "signature": "void testFilmByID()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmByDescritption",
        "signature": "void testFilmByDescritption()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmByRating",
        "signature": "void testFilmByRating()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmByLength",
        "signature": "void testFilmByLength()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmByName",
        "signature": "void testFilmByName()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmByDescription",
        "signature": "void testFilmByDescription()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilms",
        "signature": "void testFilms()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCategoryById",
        "signature": "void testCategoryById()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCategoryByName",
        "signature": "void testCategoryByName()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCustomerById",
        "signature": "void testCustomerById()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCustomer",
        "signature": "void testCustomer()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testStaff",
        "signature": "void testStaff()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmController",
        "signature": "void testFilmController()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testFilmController2",
        "signature": "void testFilmController2()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCategory",
        "signature": "void testCategory()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCategory2",
        "signature": "void testCategory2()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testActorController1",
        "signature": "void testActorController1()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCustomerController",
        "signature": "void testCustomerController()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCustomerController2",
        "signature": "void testCustomerController2()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testInventory",
        "signature": "void testInventory()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testRental",
        "signature": "void testRental()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "testCategoryByTimeStamp",
        "signature": "void testCategoryByTimeStamp()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/test/java/com/sparta/engineering72/sakilaproject/SakilaProjectApplicationTests.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject;\n\nimport com.sparta.engineering72.sakilaproject.controller.MainController;\nimport org.junit.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n\npublic class SakilaProjectApplicationTests {\n\n    @Test\n    public void MainController1() {\n        MainController mainController = new MainController();\n        String result = mainController.home();\n        assertEquals(result, \"home\");\n    }\n\n    @Test\n    public void MainController2() {\n        MainController mainController = new MainController();\n        String result = mainController.account();\n        assertEquals(result, \"account\");\n    }\n\n    @Test\n    public void MainController3() {\n        MainController mainController = new MainController();\n        String result = mainController.login();\n        assertEquals(result, \"login\");\n    }\n\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject",
    "class_name": "SakilaProjectApplicationTests",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.controller.MainController",
      "org.junit.Test",
      "org.junit.jupiter.api.Assertions.assertEquals"
    ],
    "extends": null,
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "MainController1",
        "signature": "void MainController1()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "MainController2",
        "signature": "void MainController2()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "MainController3",
        "signature": "void MainController3()",
        "method_annotations": [
          "Test"
        ],
        "parameters": [],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/SakilaProjectApplication.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SakilaProjectApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SakilaProjectApplication.class, args);\n    }\n\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject",
    "class_name": "SakilaProjectApplication",
    "class_annotations": [
      "SpringBootApplication"
    ],
    "imports": [
      "org.springframework.boot.SpringApplication",
      "org.springframework.boot.autoconfigure.SpringBootApplication"
    ],
    "extends": null,
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "main",
        "signature": "void main(String args)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "args",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/WebSecurityConfig.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.securingweb;\n\nimport com.sparta.engineering72.sakilaproject.services.CustomerService;\nimport com.sparta.engineering72.sakilaproject.services.StaffService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private StaffService staffService;\n\n    @Autowired\n    private SuccessHandler successHandler;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception { //Defines which URL paths should be secured and which should not\n        http\n                .authorizeRequests()\n                .antMatchers(\"/customer\").hasRole(\"USER\")\n                .antMatchers(\"/owner\").hasRole(\"ADMIN\")\n                .antMatchers(\n                \"/\",\n                            \"/images/**\",\n                            \"/home\",\n                            \"/webjars/**\",\n                            \"/css/**\",\n                            \"/films/**\",\n                            \"/actors/**\",\n                            \"/categories/**\"\n                            ).permitAll() //Do not require authentication\n                .anyRequest().authenticated()\n//                .and()\n//                .exceptionHandling().accessDeniedPage(\"/accessDenied\")\n                .and()\n                .formLogin().successHandler(successHandler)\n                .loginPage(\"/login\").permitAll() //Custom login page; Everyone is allowed to view\n                .and()\n                .logout()\n                .and().exceptionHandling().accessDeniedPage(\"/error\");\n//                .permitAll();\n    }\n\n    @Bean\n    @Override\n    public UserDetailsService userDetailsService() {\n        return new UserDetailsServiceImpl();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public DaoAuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider auth = new DaoAuthenticationProvider();\n        auth.setUserDetailsService(userDetailsService());\n        auth.setPasswordEncoder(passwordEncoder());\n        return auth;\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.authenticationProvider(authenticationProvider());\n    }\n}",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.securingweb",
    "class_name": "WebSecurityConfig",
    "class_annotations": [
      "Configuration"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.services.CustomerService",
      "com.sparta.engineering72.sakilaproject.services.StaffService",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.context.annotation.Bean",
      "org.springframework.context.annotation.Configuration",
      "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder",
      "org.springframework.security.config.annotation.web.builders.HttpSecurity",
      "org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter",
      "org.springframework.security.core.userdetails.UserDetailsService",
      "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "org.springframework.security.crypto.password.PasswordEncoder"
    ],
    "extends": "WebSecurityConfigurerAdapter",
    "implements": [],
    "fields": [
      {
        "name": "customerService",
        "type": "CustomerService"
      },
      {
        "name": "staffService",
        "type": "StaffService"
      },
      {
        "name": "successHandler",
        "type": "SuccessHandler"
      }
    ],
    "methods": [
      {
        "name": "configure",
        "signature": "void configure(HttpSecurity http)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "http",
            "type": "HttpSecurity"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "userDetailsService",
        "signature": "UserDetailsService userDetailsService()",
        "method_annotations": [
          "Bean",
          "Override"
        ],
        "parameters": [],
        "return_type": "UserDetailsService",
        "method_body_raw_code": ""
      },
      {
        "name": "passwordEncoder",
        "signature": "PasswordEncoder passwordEncoder()",
        "method_annotations": [
          "Bean"
        ],
        "parameters": [],
        "return_type": "PasswordEncoder",
        "method_body_raw_code": ""
      },
      {
        "name": "authenticationProvider",
        "signature": "DaoAuthenticationProvider authenticationProvider()",
        "method_annotations": [
          "Bean"
        ],
        "parameters": [],
        "return_type": "DaoAuthenticationProvider",
        "method_body_raw_code": ""
      },
      {
        "name": "configure",
        "signature": "void configure(AuthenticationManagerBuilder auth)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "auth",
            "type": "AuthenticationManagerBuilder"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/SuccessHandler.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.securingweb;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.web.DefaultRedirectStrategy;\nimport org.springframework.security.web.RedirectStrategy;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Collection;\n\n@Component\npublic class SuccessHandler implements AuthenticationSuccessHandler {\n\n    private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();\n        authorities.forEach(authority -> {\n            if(authority.getAuthority().equals(\"ROLE_USER\")) {\n                try {\n                    redirectStrategy.sendRedirect(request, response, \"/customer\");\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            } else if(authority.getAuthority().equals(\"ROLE_ADMIN\")) {\n                try {\n                    redirectStrategy.sendRedirect(request, response, \"/owner\");\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            } else {\n                throw new IllegalStateException();\n            }\n        });\n    }\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.securingweb",
    "class_name": "SuccessHandler",
    "class_annotations": [
      "Component"
    ],
    "imports": [
      "org.springframework.security.core.Authentication",
      "org.springframework.security.core.GrantedAuthority",
      "org.springframework.security.web.DefaultRedirectStrategy",
      "org.springframework.security.web.RedirectStrategy",
      "org.springframework.security.web.authentication.AuthenticationSuccessHandler",
      "org.springframework.stereotype.Component",
      "javax.servlet.ServletException",
      "javax.servlet.http.HttpServletRequest",
      "javax.servlet.http.HttpServletResponse",
      "java.io.IOException",
      "java.util.Collection"
    ],
    "extends": null,
    "implements": [
      "AuthenticationSuccessHandler"
    ],
    "fields": [
      {
        "name": "redirectStrategy",
        "type": "RedirectStrategy"
      }
    ],
    "methods": [
      {
        "name": "onAuthenticationSuccess",
        "signature": "void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "request",
            "type": "HttpServletRequest"
          },
          {
            "name": "response",
            "type": "HttpServletResponse"
          },
          {
            "name": "authentication",
            "type": "Authentication"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/MvcConfig.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.securingweb;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class MvcConfig implements WebMvcConfigurer{\n    public void addViewControllers(ViewControllerRegistry registry) {\n        registry.addViewController(\"/home\").setViewName(\"home\");\n        registry.addViewController(\"/\").setViewName(\"home\");\n        registry.addViewController(\"/login\").setViewName(\"login\");\n    }\n\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.securingweb",
    "class_name": "MvcConfig",
    "class_annotations": [
      "Configuration"
    ],
    "imports": [
      "org.springframework.context.annotation.Configuration",
      "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry",
      "org.springframework.web.servlet.config.annotation.ViewControllerRegistry",
      "org.springframework.web.servlet.config.annotation.WebMvcConfigurer"
    ],
    "extends": null,
    "implements": [
      "WebMvcConfigurer"
    ],
    "fields": [],
    "methods": [
      {
        "name": "addViewControllers",
        "signature": "void addViewControllers(ViewControllerRegistry registry)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "registry",
            "type": "ViewControllerRegistry"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/UserDetailsServiceImpl.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.securingweb;\n\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport com.sparta.engineering72.sakilaproject.entities.Staff;\nimport com.sparta.engineering72.sakilaproject.respositories.CustomerRepository;\nimport com.sparta.engineering72.sakilaproject.respositories.StaffRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    CustomerRepository customerRepository;\n\n    @Autowired\n    StaffRepository staffRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String anyUsername) throws UsernameNotFoundException {\n        Customer customer = customerRepository.getCustomerByEmail(anyUsername);\n        Staff staff = staffRepository.getStaffByUsername(anyUsername);\n\n        User.UserBuilder builder;\n\n        if(customer == null && staff == null) {\n            throw new UsernameNotFoundException(\"Could not find user\");\n        } else {\n            builder = User.withUsername(anyUsername);\n            if(staff != null){\n                builder.password(new BCryptPasswordEncoder().encode((staff.getPassword())));\n                    builder.roles(\"ADMIN\");\n            } else {\n                builder.password(new BCryptPasswordEncoder().encode(String.valueOf(customer.getCustomerId())));\n                    builder.roles(\"USER\");\n            }\n            return builder.build();\n        }\n    }\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.securingweb",
    "class_name": "UserDetailsServiceImpl",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "com.sparta.engineering72.sakilaproject.entities.Staff",
      "com.sparta.engineering72.sakilaproject.respositories.CustomerRepository",
      "com.sparta.engineering72.sakilaproject.respositories.StaffRepository",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.security.core.userdetails.User",
      "org.springframework.security.core.userdetails.UserDetails",
      "org.springframework.security.core.userdetails.UserDetailsService",
      "org.springframework.security.core.userdetails.UsernameNotFoundException",
      "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "org.springframework.stereotype.Service"
    ],
    "extends": null,
    "implements": [
      "UserDetailsService"
    ],
    "fields": [
      {
        "name": "customerRepository",
        "type": "CustomerRepository"
      },
      {
        "name": "staffRepository",
        "type": "StaffRepository"
      }
    ],
    "methods": [
      {
        "name": "loadUserByUsername",
        "signature": "UserDetails loadUserByUsername(String anyUsername)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "anyUsername",
            "type": "String"
          }
        ],
        "return_type": "UserDetails",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/FailureHandler.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.securingweb;\n\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.security.web.access.AccessDeniedHandler;\nimport org.springframework.stereotype.Component;\n\nimport javax.persistence.Column;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@Component\npublic class FailureHandler implements AccessDeniedHandler {\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        response.sendRedirect(request.getContextPath() + \"/error\");\n    }\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.securingweb",
    "class_name": "FailureHandler",
    "class_annotations": [
      "Component"
    ],
    "imports": [
      "org.springframework.security.access.AccessDeniedException",
      "org.springframework.security.web.access.AccessDeniedHandler",
      "org.springframework.stereotype.Component",
      "javax.persistence.Column",
      "javax.servlet.ServletException",
      "javax.servlet.http.HttpServletRequest",
      "javax.servlet.http.HttpServletResponse",
      "java.io.IOException"
    ],
    "extends": null,
    "implements": [
      "AccessDeniedHandler"
    ],
    "fields": [],
    "methods": [
      {
        "name": "handle",
        "signature": "void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "request",
            "type": "HttpServletRequest"
          },
          {
            "name": "response",
            "type": "HttpServletResponse"
          },
          {
            "name": "e",
            "type": "AccessDeniedException"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/CustomerRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n    @Query(value = \"SELECT * FROM customer c WHERE c.email = :username AND c.customer_id = :password\",\n            nativeQuery = true)\n    Customer getCustomerByCredentials(String username, Integer password);\n\n    @Query(value = \"SELECT * FROM customer c WHERE c.email = :username\",\n            nativeQuery = true)\n    Customer getCustomerByUsername(String username);\n\n    @Query(value = \"SELECT * FROM customer c WHERE c.first_name = :firstName\",\n            nativeQuery = true)\n    List<Customer> getCustomersByFirstName(String firstName);\n\n    @Query(value = \"SELECT * FROM customer c WHERE c.last_name = :lastName\",\n            nativeQuery = true)\n    List<Customer> getCustomersByLastName(String lastName);\n\n    @Query(value = \"SELECT * FROM customer c WHERE c.first_name = :firstName AND c.last_name = :lastName\",\n            nativeQuery = true)\n    List<Customer> getCustomersByFullName(String firstName, String lastName);\n\n    Customer getCustomerByCustomerId(Integer id);\n    Customer getCustomerByEmail(String email);\n\n    @Query(value = \"SELECT COUNT(*) FROM customer c\",\n            nativeQuery = true)\n    Integer getCustomerCount();\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "CustomerRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.data.jpa.repository.Query",
      "java.util.List"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "getCustomerByCredentials",
        "signature": "Customer getCustomerByCredentials(String username, Integer password)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "password",
            "type": "Integer"
          }
        ],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerByUsername",
        "signature": "Customer getCustomerByUsername(String username)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "username",
            "type": "String"
          }
        ],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomersByFirstName",
        "signature": "List getCustomersByFirstName(String firstName)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomersByLastName",
        "signature": "List getCustomersByLastName(String lastName)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomersByFullName",
        "signature": "List getCustomersByFullName(String firstName, String lastName)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          },
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerByCustomerId",
        "signature": "Customer getCustomerByCustomerId(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerByEmail",
        "signature": "Customer getCustomerByEmail(String email)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "email",
            "type": "String"
          }
        ],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerCount",
        "signature": "Integer getCustomerCount()",
        "method_annotations": [
          "Query"
        ],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/RentalRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Rental;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\npublic interface RentalRepository extends JpaRepository<Rental, Integer> {\n    Rental getRentalByRentalId(Integer id);\n    \n    @Query(value = \"SELECT * FROM rental r INNER JOIN customer c ON r.customer_id = c.customer_id WHERE c.customer_id = :customerId\",\n            nativeQuery = true)\n    List<Rental> getRentalByCustomerId(Integer customerId);\n\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "RentalRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Rental",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.data.jpa.repository.Query",
      "java.util.List"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "getRentalByRentalId",
        "signature": "Rental getRentalByRentalId(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Rental",
        "method_body_raw_code": ""
      },
      {
        "name": "getRentalByCustomerId",
        "signature": "List getRentalByCustomerId(Integer customerId)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "customerId",
            "type": "Integer"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/StaffRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Film;\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport com.sparta.engineering72.sakilaproject.entities.Staff;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\npublic interface StaffRepository extends JpaRepository<Staff, Integer> {\n\n    @Query(value = \"SELECT * FROM staff s WHERE s.username = :username\",\n            nativeQuery = true)\n    Staff getStaffByUsername(String username);\n\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "StaffRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Film",
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "com.sparta.engineering72.sakilaproject.entities.Staff",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.data.jpa.repository.Query"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "getStaffByUsername",
        "signature": "Staff getStaffByUsername(String username)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "username",
            "type": "String"
          }
        ],
        "return_type": "Staff",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/ActorRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Actor;\nimport com.sparta.engineering72.sakilaproject.entities.Film;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\npublic interface ActorRepository extends JpaRepository<Actor, Integer>{\n    List<Actor> findActorsByFirstNameAndLastName(String firstName, String lastName);\n    List<Actor> findActorsByFirstName(String firstName);\n    List<Actor> findActorsByLastName(String lastName);\n    Actor getActorByActorId(Integer id);\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "ActorRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Actor",
      "com.sparta.engineering72.sakilaproject.entities.Film",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.data.jpa.repository.Query",
      "java.util.List"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "findActorsByFirstNameAndLastName",
        "signature": "List findActorsByFirstNameAndLastName(String firstName, String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          },
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "findActorsByFirstName",
        "signature": "List findActorsByFirstName(String firstName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "findActorsByLastName",
        "signature": "List findActorsByLastName(String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorByActorId",
        "signature": "Actor getActorByActorId(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Actor",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/FilmRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Actor;\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport com.sparta.engineering72.sakilaproject.entities.Film;\nimport com.sparta.engineering72.sakilaproject.entities.FilmActor;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.List;\n\npublic interface FilmRepository extends JpaRepository<Film, Integer> {\n\n    @Query(value = \"SELECT count(*) FROM film f INNER JOIN inventory i ON f.film_id = i.film_id WHERE i.film_id = :id\",\n            nativeQuery = true)\n    Integer getAvailableFilmCount(Integer id);\n\n    @Query(value = \"SELECT * FROM film f INNER JOIN inventory i ON f.film_id = i.film_id\",\n            nativeQuery = true)\n    List<Film> getAvailableFilms();\n\n    @Query(value = \"SELECT * FROM film f INNER JOIN film_category fc ON f.film_id = fc.film_id INNER JOIN category c ON fc.category_id = c.category_id WHERE c.category_id = :categoryId\",\n            nativeQuery = true)\n    List<Film> getAllFilmsByCategory(Integer categoryId);\n\n    @Query(value = \"SELECT * FROM actor a INNER JOIN film_actor fa ON a.actor_id = fa.actor_id INNER JOIN film f ON fa.film_id = f.film_id WHERE a.actor_id = :actorId\",\n            nativeQuery = true)\n    List<Film> getAllFilmsByActor(Integer actorId);\n\n    List<Film> findByTitle(String title);\n    Film getFilmByFilmId(Integer id);\n\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "FilmRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Actor",
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "com.sparta.engineering72.sakilaproject.entities.Film",
      "com.sparta.engineering72.sakilaproject.entities.FilmActor",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.data.jpa.repository.Query",
      "java.util.List"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "getAvailableFilmCount",
        "signature": "Integer getAvailableFilmCount(Integer id)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Integer",
        "method_body_raw_code": ""
      },
      {
        "name": "getAvailableFilms",
        "signature": "List getAvailableFilms()",
        "method_annotations": [
          "Query"
        ],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getAllFilmsByCategory",
        "signature": "List getAllFilmsByCategory(Integer categoryId)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "type": "Integer"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getAllFilmsByActor",
        "signature": "List getAllFilmsByActor(Integer actorId)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "actorId",
            "type": "Integer"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "findByTitle",
        "signature": "List findByTitle(String title)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "title",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmByFilmId",
        "signature": "Film getFilmByFilmId(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Film",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/CategoryRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Category;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\npublic interface CategoryRepository extends JpaRepository<Category, Integer> {\n    Category getCategoryByCategoryId(Integer id);\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "CategoryRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Category",
      "org.springframework.data.jpa.repository.JpaRepository",
      "java.util.List"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "getCategoryByCategoryId",
        "signature": "Category getCategoryByCategoryId(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Category",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/respositories/InventoryRepository.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.respositories;\n\nimport com.sparta.engineering72.sakilaproject.entities.Inventory;\nimport com.sparta.engineering72.sakilaproject.entities.Rental;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface InventoryRepository extends JpaRepository<Inventory, Integer> {\n    @Query(value = \"SELECT * FROM inventory i INNER JOIN rental r ON i.inventory_id = r.inventory_id WHERE i.inventory_id = :inventoryId\",\n            nativeQuery = true)\n    Inventory getInventoriesByInventoryId(Integer inventoryId);\n\n    @Modifying\n    @Query(value = \"DELETE FROM inventory i WHERE i.film_id = :id\",\n        nativeQuery = true)\n    void deleteInventoryByInventoryId(@Param(\"id\")Integer id);\n\n    @Query(value = \"SELECT COUNT(*) FROM inventory i\",\n            nativeQuery = true)\n    Integer getInventoryCount();\n\n}\n",
    "category": "DAO",
    "package_name": "com.sparta.engineering72.sakilaproject.respositories",
    "class_name": "InventoryRepository",
    "class_annotations": [],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Inventory",
      "com.sparta.engineering72.sakilaproject.entities.Rental",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.data.jpa.repository.Modifying",
      "org.springframework.data.jpa.repository.Query",
      "org.springframework.data.repository.query.Param",
      "java.util.List"
    ],
    "extends": [
      "JpaRepository"
    ],
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "getInventoriesByInventoryId",
        "signature": "Inventory getInventoriesByInventoryId(Integer inventoryId)",
        "method_annotations": [
          "Query"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "type": "Integer"
          }
        ],
        "return_type": "Inventory",
        "method_body_raw_code": ""
      },
      {
        "name": "deleteInventoryByInventoryId",
        "signature": "void deleteInventoryByInventoryId(Integer id)",
        "method_annotations": [
          "Modifying",
          "Query"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getInventoryCount",
        "signature": "Integer getInventoryCount()",
        "method_annotations": [
          "Query"
        ],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/controller/StaffController.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.controller;\n\nimport com.sparta.engineering72.sakilaproject.entities.Staff;\nimport com.sparta.engineering72.sakilaproject.services.CustomerService;\nimport com.sparta.engineering72.sakilaproject.services.InventoryService;\nimport com.sparta.engineering72.sakilaproject.services.StaffService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.GetMapping;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@Controller\npublic class StaffController {\n\n    private StaffService staffService;\n    private CustomerService customerService;\n    private InventoryService inventoryService;\n    @Autowired\n    public StaffController(StaffService staffService, CustomerService customerService, InventoryService inventoryService) {\n        this.staffService = staffService;\n        this.customerService = customerService;\n        this.inventoryService = inventoryService;\n    }\n    @GetMapping(\"/owner\")\n    public String currentUser(ModelMap modelMap, HttpServletRequest request) {\n        String username = request.getRemoteUser();\n        Staff staff = staffService.getStaffByUsername(username);\n        Integer customerCount = customerService.getCustomerCount();\n        Integer inventoryCount = inventoryService.getInventoryCount();\n        modelMap.addAttribute(\"staff\", staff);\n        modelMap.addAttribute(\"customers\", customerCount);\n        modelMap.addAttribute(\"inventory\", inventoryCount);\n        return \"/owner/owner\";\n    }\n}\n",
    "category": "Controller",
    "package_name": "com.sparta.engineering72.sakilaproject.controller",
    "class_name": "StaffController",
    "class_annotations": [
      "Controller"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Staff",
      "com.sparta.engineering72.sakilaproject.services.CustomerService",
      "com.sparta.engineering72.sakilaproject.services.InventoryService",
      "com.sparta.engineering72.sakilaproject.services.StaffService",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.stereotype.Controller",
      "org.springframework.ui.ModelMap",
      "org.springframework.web.bind.annotation.GetMapping",
      "javax.servlet.http.HttpServletRequest"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "staffService",
        "type": "StaffService"
      },
      {
        "name": "customerService",
        "type": "CustomerService"
      },
      {
        "name": "inventoryService",
        "type": "InventoryService"
      }
    ],
    "methods": [
      {
        "name": "currentUser",
        "signature": "String currentUser(ModelMap modelMap, HttpServletRequest request)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "request",
            "type": "HttpServletRequest"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/controller/CustomerController.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.controller;\n\nimport com.sparta.engineering72.sakilaproject.entities.*;\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport com.sparta.engineering72.sakilaproject.entities.Film;\nimport com.sparta.engineering72.sakilaproject.services.CustomerService;\nimport com.sparta.engineering72.sakilaproject.services.FilmService;\nimport com.sparta.engineering72.sakilaproject.services.InventoryService;\nimport com.sparta.engineering72.sakilaproject.services.RentalService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.LocalDate;\n\n@Controller\npublic class CustomerController {\n\n    private CustomerService customerService;\n    private RentalService rentalService;\n    private InventoryService inventoryService;\n    private FilmService filmService;\n\n    @Autowired\n    public CustomerController(CustomerService customerService, RentalService rentalService, InventoryService inventoryService, FilmService filmService) {\n        this.customerService = customerService;\n        this.rentalService = rentalService;\n        this.inventoryService = inventoryService;\n        this.filmService = filmService;\n    }\n\n    @GetMapping(\"/customer\")\n    public String currentUser(ModelMap modelMap, HttpServletRequest request) {\n        String email = request.getRemoteUser();\n        Customer customer = customerService.getCustomerByEmail(email);\n        List<Order> ordersList = new ArrayList<>();\n        if(customer != null){\n            List<Rental> customersRentals = rentalService.getRentalsByCustomer(customer.getCustomerId());\n            for(Rental rental : customersRentals){\n                int inventoryId = rental.getInventoryId();\n                Inventory inventory = inventoryService.getInventoriesById(inventoryId);\n                Film film = filmService.getFilmByID(inventory.getFilmId());\n                Order order = new Order(customer, film, rental);\n                ordersList.add(order);\n            }\n        }\n        modelMap.addAttribute(\"orders\", ordersList);\n        modelMap.addAttribute(\"customer\", customer);\n        return \"customer/customer\";\n    }\n\n    @GetMapping(\"/owner/customers\")\n    public String getCustomers(ModelMap modelMap,\n                               @RequestParam(value = \"firstName\", defaultValue = \"ALL CUSTOMERS\") String firstNameFilter,\n                               @RequestParam(value = \"lastName\", defaultValue = \"ALL CUSTOMERS\") String lastNameFilter) {\n        List<Customer> customers;\n        if (firstNameFilter.equals(\"ALL CUSTOMERS\") && lastNameFilter.equals(\"ALL CUSTOMERS\")) {\n            customers = customerService.getAllCustomers();\n        } else if (lastNameFilter.equals(\"ALL CUSTOMERS\")){\n            customers = customerService.getCustomersByFirstName(firstNameFilter);\n        } else if (firstNameFilter.equals(\"ALL CUSTOMERS\")) {\n            customers = customerService.getCustomersByLastName(lastNameFilter);\n        } else {\n            customers = customerService.getCustomersByFullName(firstNameFilter, lastNameFilter);\n        }\n\n        modelMap.addAttribute(\"customers\", customers);\n        modelMap.addAttribute(\"allCustomers\", customerService.getAllCustomers());\n        return \"owner/customers\";\n    }\n\n\n    @GetMapping(\"/owner/view/customers/{id}\")\n    public String showUsersRentalHistory(ModelMap modelMap,\n                                         @PathVariable(name = \"id\") int id) {\n        Customer customer = customerService.getCustomerByID(id);\n        List<Order> ordersList = new ArrayList<>();\n        if (customer != null) {\n            List<Rental> customersRentals = rentalService.getRentalsByCustomer(id);\n            for (Rental rental : customersRentals) {\n                int inventoryId = rental.getInventoryId();\n                Inventory inventory = inventoryService.getInventoriesById(inventoryId);\n                Film film = filmService.getFilmByID(inventory.getFilmId());\n                Order order = new Order(customer, film, rental);\n                ordersList.add(order);\n            }\n        }\n        modelMap.addAttribute(\"history\", ordersList);\n        modelMap.addAttribute(\"customer\", customer);\n        return \"owner/customerDetails\";\n    }\n\n\n}\n",
    "category": "Controller",
    "package_name": "com.sparta.engineering72.sakilaproject.controller",
    "class_name": "CustomerController",
    "class_annotations": [
      "Controller"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities",
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "com.sparta.engineering72.sakilaproject.entities.Film",
      "com.sparta.engineering72.sakilaproject.services.CustomerService",
      "com.sparta.engineering72.sakilaproject.services.FilmService",
      "com.sparta.engineering72.sakilaproject.services.InventoryService",
      "com.sparta.engineering72.sakilaproject.services.RentalService",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.stereotype.Controller",
      "org.springframework.ui.Model",
      "org.springframework.ui.ModelMap",
      "org.springframework.web.bind.annotation",
      "javax.servlet.http.HttpServletRequest",
      "java.util.ArrayList",
      "java.util.List",
      "javax.servlet.http.HttpServletRequest",
      "java.sql.Timestamp",
      "java.time.Instant",
      "java.time.LocalDate"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "customerService",
        "type": "CustomerService"
      },
      {
        "name": "rentalService",
        "type": "RentalService"
      },
      {
        "name": "inventoryService",
        "type": "InventoryService"
      },
      {
        "name": "filmService",
        "type": "FilmService"
      }
    ],
    "methods": [
      {
        "name": "currentUser",
        "signature": "String currentUser(ModelMap modelMap, HttpServletRequest request)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "request",
            "type": "HttpServletRequest"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomers",
        "signature": "String getCustomers(ModelMap modelMap, String firstNameFilter, String lastNameFilter)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "firstNameFilter",
            "type": "String"
          },
          {
            "name": "lastNameFilter",
            "type": "String"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "showUsersRentalHistory",
        "signature": "String showUsersRentalHistory(ModelMap modelMap, int id)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/controller/ActorController.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.controller;\n\nimport com.sparta.engineering72.sakilaproject.entities.Actor;\nimport com.sparta.engineering72.sakilaproject.services.ActorService;\nimport com.sparta.engineering72.sakilaproject.services.FilmService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.List;\n\n@Controller\npublic class ActorController {\n\n    private FilmService filmService;\n    private ActorService actorService;\n\n    @Autowired\n    public ActorController(FilmService filmService, ActorService actorService) {\n        this.filmService = filmService;\n        this.actorService = actorService;\n    }\n\n    @GetMapping(\"/actors\")\n    public String getActors(ModelMap modelMap,\n                            @RequestParam(value = \"firstName\", defaultValue = \"ALL ACTORS\") String firstNameFilter,\n                            @RequestParam(value = \"lastName\", defaultValue = \"ALL ACTORS\") String lastNameFilter) {\n        List<Actor> actors;\n        if (firstNameFilter.equals(\"ALL ACTORS\") && lastNameFilter.equals(\"ALL ACTORS\")) {\n            actors = actorService.getAllActors();\n        } else if (lastNameFilter.equals(\"ALL ACTORS\")){\n            actors = actorService.getActorsByFirstName(firstNameFilter);\n        } else if (firstNameFilter.equals(\"ALL ACTORS\")) {\n            actors = actorService.getActorsByLastName(lastNameFilter);\n        } else {\n            actors = actorService.getActorsByFullName(firstNameFilter, lastNameFilter);\n        }\n        modelMap.addAttribute(\"actors\", actors);\n        modelMap.addAttribute(\"allActors\", actorService.getAllActors());\n        return \"actors/actors\";\n    }\n\n    @GetMapping(\"/actors/details\")\n    public String getActorFilmDetails(ModelMap modelMap,\n                                      @RequestParam(value = \"id\") Integer id) {\n        modelMap.addAttribute(\"name\", actorService.getActorFullNameFromID(id));\n        modelMap.addAttribute(\"films\", filmService.getFilmsByActor(id));\n        return \"actors/actorDetails\";\n    }\n\n    public Actor findActorById(Integer id) {\n        return actorService.getActorByID(id);\n    }\n\n    public String getActorFullNameFromID(Integer id){\n        Actor actor = actorService.getActorByID(id);\n        return actor.getFirstName() + \" \" + actor.getLastName();\n    }\n}\n",
    "category": "Controller",
    "package_name": "com.sparta.engineering72.sakilaproject.controller",
    "class_name": "ActorController",
    "class_annotations": [
      "Controller"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Actor",
      "com.sparta.engineering72.sakilaproject.services.ActorService",
      "com.sparta.engineering72.sakilaproject.services.FilmService",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.stereotype.Controller",
      "org.springframework.ui.ModelMap",
      "org.springframework.web.bind.annotation.GetMapping",
      "org.springframework.web.bind.annotation.RequestParam",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmService",
        "type": "FilmService"
      },
      {
        "name": "actorService",
        "type": "ActorService"
      }
    ],
    "methods": [
      {
        "name": "getActors",
        "signature": "String getActors(ModelMap modelMap, String firstNameFilter, String lastNameFilter)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "firstNameFilter",
            "type": "String"
          },
          {
            "name": "lastNameFilter",
            "type": "String"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorFilmDetails",
        "signature": "String getActorFilmDetails(ModelMap modelMap, Integer id)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "findActorById",
        "signature": "Actor findActorById(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Actor",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorFullNameFromID",
        "signature": "String getActorFullNameFromID(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/controller/MainController.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.stereotype.Controller;\n\n@Controller\npublic class MainController {\n\n    @RequestMapping(value=\"/\")\n    public String home() {\n        return \"home\";\n    }\n\n    @RequestMapping(value=\"/login\")\n    public String login() {\n        return \"login\";\n    }\n\n    @RequestMapping(value=\"/account\")\n    public String account(){\n        return \"account\";\n    }\n\n}\n",
    "category": "Controller",
    "package_name": "com.sparta.engineering72.sakilaproject.controller",
    "class_name": "MainController",
    "class_annotations": [
      "Controller"
    ],
    "imports": [
      "org.springframework.web.bind.annotation.RequestMapping",
      "org.springframework.stereotype.Controller"
    ],
    "extends": null,
    "implements": [],
    "fields": [],
    "methods": [
      {
        "name": "home",
        "signature": "String home()",
        "method_annotations": [
          "RequestMapping"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "login",
        "signature": "String login()",
        "method_annotations": [
          "RequestMapping"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "account",
        "signature": "String account()",
        "method_annotations": [
          "RequestMapping"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/controller/CategoryController.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.controller;\n\nimport com.sparta.engineering72.sakilaproject.entities.Category;\nimport com.sparta.engineering72.sakilaproject.services.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\npublic class CategoryController {\n\n    private FilmService filmService;\n    private CategoryService categoryService;\n\n    @Autowired\n    public CategoryController(FilmService filmService, CategoryService categoryService) {\n        this.filmService = filmService;\n        this.categoryService = categoryService;\n    }\n\n    @GetMapping(\"/categories\")\n    public String getCategories(ModelMap modelMap) {\n        modelMap.addAttribute(\"allCategories\", categoryService.getAllCategories());\n        return \"/categories/categories\";\n    }\n\n    @GetMapping(\"/categories/details\")\n    public String getCategoryDetails(ModelMap modelMap,\n                                 @RequestParam(value = \"id\") Integer id) {\n        modelMap.addAttribute(\"category\", categoryService.getByCategoryId(id));\n        modelMap.addAttribute(\"films\", filmService.getFilmsByCategory(id));\n        return \"categories/categoryDetails\";    }\n\n        public Category getCategoryById(Integer id) {\n            return categoryService.getByCategoryId(id);\n        }\n\n}\n",
    "category": "Controller",
    "package_name": "com.sparta.engineering72.sakilaproject.controller",
    "class_name": "CategoryController",
    "class_annotations": [
      "Controller"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Category",
      "com.sparta.engineering72.sakilaproject.services",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.stereotype.Controller",
      "org.springframework.ui.ModelMap",
      "org.springframework.web.bind.annotation.GetMapping",
      "org.springframework.web.bind.annotation.RequestParam"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmService",
        "type": "FilmService"
      },
      {
        "name": "categoryService",
        "type": "CategoryService"
      }
    ],
    "methods": [
      {
        "name": "getCategories",
        "signature": "String getCategories(ModelMap modelMap)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "getCategoryDetails",
        "signature": "String getCategoryDetails(ModelMap modelMap, Integer id)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "getCategoryById",
        "signature": "Category getCategoryById(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Category",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/controller/FilmController.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.controller;\n\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport com.sparta.engineering72.sakilaproject.entities.Film;\nimport com.sparta.engineering72.sakilaproject.entities.Inventory;\nimport com.sparta.engineering72.sakilaproject.entities.Rental;\nimport com.sparta.engineering72.sakilaproject.services.CustomerService;\nimport com.sparta.engineering72.sakilaproject.services.FilmService;\nimport com.sparta.engineering72.sakilaproject.services.InventoryService;\nimport com.sparta.engineering72.sakilaproject.services.RentalService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.criteria.CriteriaBuilder;\nimport java.security.Principal;\nimport java.sql.Timestamp;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport org.springframework.ui.Model;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Controller\npublic class FilmController {\n\n    private FilmService filmService;\n    private InventoryService inventoryService;\n    private RentalService rentalService;\n    private CustomerService customerService;\n\n    @Autowired\n    public FilmController(FilmService filmService, InventoryService inventoryService, RentalService rentalService, CustomerService customerService) {\n        this.filmService = filmService;\n        this.inventoryService = inventoryService;\n        this.rentalService = rentalService;\n        this.customerService = customerService;\n    }\n\n    @GetMapping(\"/films\")\n    public String getFilms(ModelMap modelMap, @RequestParam(value = \"title\", defaultValue = \"ALL FILMS\") String filter) {\n        List<Film> films;\n        if (filter.equals(\"ALL FILMS\")){\n            films = filmService.getAllFilms();\n        }\n        else {\n            films = filmService.getFilmsByTitle(filter);\n        }\n//        modelMap.addAttribute(\"title\", filmService.getFilmsByTitle(title));\n        modelMap.addAttribute(\"films\", films);\n        modelMap.addAttribute(\"availableFilms\", filmService.getAvailableFilms());\n        modelMap.addAttribute(\"allFilms\", filmService.getAllFilms());\n        return \"/films/films\";\n    }\n\n    @GetMapping(\"/films/details\")\n    public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id) {\n        Film film = filmService.getFilmByID(id);\n        boolean available = filmService.getAvailableFilms().contains(film);\n        modelMap.addAttribute(\"available\", available);\n        modelMap.addAttribute(\"details\", film);\n        return \"films/filmDetails\";\n    }\n\n    @GetMapping(\"/rent/{filmid}\")\n    public String rentFilm(ModelMap modelMap, Principal principal,\n                           @PathVariable(\"filmid\") int filmid){\n        String name = principal.getName();\n        Customer customer = customerService.getCustomerByEmail(name);\n        List<Inventory> inventoryList = inventoryService.getAllInventory();\n        for (Inventory inventory : inventoryList){\n            if (inventory.getFilmId() == filmid){\n                LocalDateTime returnDate = LocalDateTime.now().plusDays(filmService.getFilmByID(inventory.getFilmId()).getRentalDuration());\n//                inventoryService.deleteInventoryItemById(inventory.getFilmId());\n                rentalService.addRental(inventory.getInventoryId(), customer.getCustomerId(), Timestamp.valueOf(returnDate));\n                break;\n            }\n        }\n        modelMap.addAttribute(\"rent\",\"Rented\");\n        return \"redirect:/films\";\n    }\n\n    @GetMapping(\"/owner/manage-films\")\n    public String getFilmDetails(ModelMap modelMap,\n                                 @RequestParam(value = \"title\", defaultValue = \"ALL FILMS\") String filter) {\n\n\n        List<Film> films;\n        if (filter.equals(\"ALL FILMS\")){\n            films = filmService.getAllFilms();\n        }\n        else {\n            films = filmService.getFilmsByTitle(filter);\n        }\n\n        List<Film> allFilms = filmService.getAllFilms();\n        HashMap<Integer, Integer> filmCount = new HashMap<>();\n        for(Film film : allFilms){\n            filmCount.put(film.getFilmId(), filmService.getAvailableFilmCount(film.getFilmId()));\n        }\n\n        modelMap.addAttribute(\"films\", films);\n        modelMap.addAttribute(\"filmCount\", filmCount);\n        modelMap.addAttribute(\"allFilms\", films);\n        return \"/owner/manage-films\";\n    }\n\n    @RequestMapping(\"/edit/{id}\")\n    public ModelAndView showEditProductPage(@PathVariable(name = \"id\") int id) {\n        ModelAndView mav = new ModelAndView(\"/owner/edit-film\");\n        Film film = filmService.getFilmByID(id);\n        mav.addObject(\"film\", film);\n\n        return mav;\n    }\n\n    @RequestMapping(\"/delete/{id}\")\n    public String deleteProduct(@PathVariable(name = \"id\") int id) {\n        filmService.deleteFilmById(id);\n        return \"redirect:/owner/manage-films\";\n    }\n\n\n    public Film findFilmByID(Integer id) {\n        return filmService.getFilmByID(id);\n    }\n\n}\n",
    "category": "Controller",
    "package_name": "com.sparta.engineering72.sakilaproject.controller",
    "class_name": "FilmController",
    "class_annotations": [
      "Controller"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "com.sparta.engineering72.sakilaproject.entities.Film",
      "com.sparta.engineering72.sakilaproject.entities.Inventory",
      "com.sparta.engineering72.sakilaproject.entities.Rental",
      "com.sparta.engineering72.sakilaproject.services.CustomerService",
      "com.sparta.engineering72.sakilaproject.services.FilmService",
      "com.sparta.engineering72.sakilaproject.services.InventoryService",
      "com.sparta.engineering72.sakilaproject.services.RentalService",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.stereotype.Controller",
      "org.springframework.transaction.annotation.Transactional",
      "org.springframework.ui.ModelMap",
      "org.springframework.web.bind.annotation",
      "javax.persistence.criteria.CriteriaBuilder",
      "java.security.Principal",
      "java.sql.Timestamp",
      "java.time.LocalDateTime",
      "java.util.ArrayList",
      "java.util.HashMap",
      "org.springframework.ui.Model",
      "org.springframework.ui.ModelMap",
      "org.springframework.web.bind.annotation",
      "org.springframework.web.servlet.ModelAndView",
      "java.sql.Timestamp",
      "java.time.Instant",
      "java.time.LocalDate",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmService",
        "type": "FilmService"
      },
      {
        "name": "inventoryService",
        "type": "InventoryService"
      },
      {
        "name": "rentalService",
        "type": "RentalService"
      },
      {
        "name": "customerService",
        "type": "CustomerService"
      }
    ],
    "methods": [
      {
        "name": "getFilms",
        "signature": "String getFilms(ModelMap modelMap, String filter)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "filter",
            "type": "String"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmDetails",
        "signature": "String getFilmDetails(ModelMap modelMap, Integer id)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "rentFilm",
        "signature": "String rentFilm(ModelMap modelMap, Principal principal, int filmid)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "principal",
            "type": "Principal"
          },
          {
            "name": "filmid",
            "type": "int"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmDetails",
        "signature": "String getFilmDetails(ModelMap modelMap, String filter)",
        "method_annotations": [
          "GetMapping"
        ],
        "parameters": [
          {
            "name": "modelMap",
            "type": "ModelMap"
          },
          {
            "name": "filter",
            "type": "String"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "showEditProductPage",
        "signature": "ModelAndView showEditProductPage(int id)",
        "method_annotations": [
          "RequestMapping"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "ModelAndView",
        "method_body_raw_code": ""
      },
      {
        "name": "deleteProduct",
        "signature": "String deleteProduct(int id)",
        "method_annotations": [
          "RequestMapping"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "findFilmByID",
        "signature": "Film findFilmByID(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Film",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/StaffService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Staff;\nimport com.sparta.engineering72.sakilaproject.respositories.StaffRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class StaffService {\n    private final StaffRepository staffRepository;\n\n    public StaffService(StaffRepository staffRepository) {\n        this.staffRepository = staffRepository;\n    }\n\n    public List<Staff> getAllStaff(){\n        return staffRepository.findAll();\n    }\n\n    public Staff getStaffByUsername(String username){\n        return staffRepository.getStaffByUsername(username);\n    }\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "StaffService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Staff",
      "com.sparta.engineering72.sakilaproject.respositories.StaffRepository",
      "org.springframework.stereotype.Service",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "staffRepository",
        "type": "StaffRepository"
      }
    ],
    "methods": [
      {
        "name": "getAllStaff",
        "signature": "List getAllStaff()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getStaffByUsername",
        "signature": "Staff getStaffByUsername(String username)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "username",
            "type": "String"
          }
        ],
        "return_type": "Staff",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/RentalService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Rental;\nimport com.sparta.engineering72.sakilaproject.respositories.RentalRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.sql.Timestamp;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Service\npublic class RentalService {\n\n    private RentalRepository rentalRepository;\n\n    public RentalService(RentalRepository rentalRepository) {\n        this.rentalRepository = rentalRepository;\n    }\n\n    public List<Rental> getRentalsByCustomer(Integer id){\n        return rentalRepository.getRentalByCustomerId(id);\n    }\n\n    public void addRental(int inventoryId, int customerId, Timestamp returnDate){\n        LocalDateTime rentalDate = LocalDateTime.now();\n        Rental rental = new Rental();\n        rental.setInventoryId(inventoryId);\n        rental.setCustomerId(customerId);\n        rental.setRentalDate(Timestamp.valueOf(rentalDate));\n        rental.setLastUpdate(Timestamp.valueOf(rentalDate));\n        rental.setReturnDate(returnDate);\n        rental.setStaffId(1); //requires default value\n        rentalRepository.save(rental);\n    }\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "RentalService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Rental",
      "com.sparta.engineering72.sakilaproject.respositories.RentalRepository",
      "org.springframework.stereotype.Service",
      "java.sql.Timestamp",
      "java.time.LocalDateTime",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "rentalRepository",
        "type": "RentalRepository"
      }
    ],
    "methods": [
      {
        "name": "getRentalsByCustomer",
        "signature": "List getRentalsByCustomer(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "addRental",
        "signature": "void addRental(int inventoryId, int customerId, Timestamp returnDate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "inventoryId",
            "type": "int"
          },
          {
            "name": "customerId",
            "type": "int"
          },
          {
            "name": "returnDate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/InventoryService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Inventory;\nimport com.sparta.engineering72.sakilaproject.respositories.InventoryRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n@Service\npublic class InventoryService {\n\n    private final InventoryRepository inventoryRepository;\n\n    public InventoryService(InventoryRepository inventoryRepository){\n        this.inventoryRepository = inventoryRepository;\n    }\n\n    public List<Inventory> getAllInventory(){\n        return inventoryRepository.findAll();\n    }\n\n    public Inventory getInventoriesById(Integer id){\n        return inventoryRepository.getInventoriesByInventoryId(id);\n    }\n\n    @Transactional\n    public void deleteInventoryItemById(Integer id){\n        inventoryRepository.deleteInventoryByInventoryId(id);\n    }\n\n    public Integer getInventoryCount(){\n        return inventoryRepository.getInventoryCount();\n    }\n\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "InventoryService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Inventory",
      "com.sparta.engineering72.sakilaproject.respositories.InventoryRepository",
      "org.springframework.stereotype.Service",
      "org.springframework.transaction.annotation.Transactional",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "inventoryRepository",
        "type": "InventoryRepository"
      }
    ],
    "methods": [
      {
        "name": "getAllInventory",
        "signature": "List getAllInventory()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getInventoriesById",
        "signature": "Inventory getInventoriesById(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Inventory",
        "method_body_raw_code": ""
      },
      {
        "name": "deleteInventoryItemById",
        "signature": "void deleteInventoryItemById(Integer id)",
        "method_annotations": [
          "Transactional"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getInventoryCount",
        "signature": "Integer getInventoryCount()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/CustomerService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Customer;\nimport com.sparta.engineering72.sakilaproject.respositories.CustomerRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n\n@Service\npublic class CustomerService {\n    private final CustomerRepository customerRepository;\n\n    public CustomerService(CustomerRepository customerRepository){\n        this.customerRepository = customerRepository;\n    }\n\n    public List<Customer> getAllCustomers(){\n        return customerRepository.findAll();\n    }\n\n    public List<Customer> getCustomersByFirstName(String firstName){\n        return customerRepository.getCustomersByFirstName(firstName);\n    }\n\n    public List<Customer> getCustomersByLastName(String lastName){\n        return customerRepository.getCustomersByLastName(lastName);\n    }\n\n    public List<Customer> getCustomersByFullName(String firstName, String lastName){\n        return customerRepository.getCustomersByFullName(firstName, lastName);\n    }\n\n    public Customer getCustomerByID(int id){\n        return customerRepository.getCustomerByCustomerId(id);\n    }\n\n    public Customer getCustomerByEmail(String email) {\n        return customerRepository.getCustomerByEmail(email);\n    }\n\n    public void save(Customer customer) {\n        customerRepository.save(customer);\n    }\n\n    public Integer getCustomerCount(){\n        return customerRepository.getCustomerCount();\n    }\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "CustomerService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Customer",
      "com.sparta.engineering72.sakilaproject.respositories.CustomerRepository",
      "org.springframework.stereotype.Service",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "customerRepository",
        "type": "CustomerRepository"
      }
    ],
    "methods": [
      {
        "name": "getAllCustomers",
        "signature": "List getAllCustomers()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomersByFirstName",
        "signature": "List getCustomersByFirstName(String firstName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomersByLastName",
        "signature": "List getCustomersByLastName(String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomersByFullName",
        "signature": "List getCustomersByFullName(String firstName, String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          },
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerByID",
        "signature": "Customer getCustomerByID(int id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerByEmail",
        "signature": "Customer getCustomerByEmail(String email)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "email",
            "type": "String"
          }
        ],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "save",
        "signature": "void save(Customer customer)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "customer",
            "type": "Customer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerCount",
        "signature": "Integer getCustomerCount()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/CategoryService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Category;\nimport com.sparta.engineering72.sakilaproject.respositories.CategoryRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class CategoryService {\n\n    private final CategoryRepository categoryRepository;\n\n    public CategoryService(CategoryRepository categoryRepository){\n        this.categoryRepository = categoryRepository;\n    }\n\n    public List<Category> getAllCategories(){\n        return categoryRepository.findAll();\n    }\n\n    public Category getByCategoryId(Integer id){\n        return categoryRepository.getCategoryByCategoryId(id);\n    }\n\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "CategoryService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Category",
      "com.sparta.engineering72.sakilaproject.respositories.CategoryRepository",
      "org.springframework.stereotype.Service",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "categoryRepository",
        "type": "CategoryRepository"
      }
    ],
    "methods": [
      {
        "name": "getAllCategories",
        "signature": "List getAllCategories()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getByCategoryId",
        "signature": "Category getByCategoryId(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Category",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/ActorService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Actor;\nimport com.sparta.engineering72.sakilaproject.respositories.ActorRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class ActorService {\n\n    private final ActorRepository actorRepository;\n\n    public ActorService(ActorRepository actorRepository){\n        this.actorRepository = actorRepository;\n    }\n\n    public List<Actor> getAllActors(){\n        return (List<Actor>)actorRepository.findAll();\n    }\n\n    public Actor getActorByID(int id){\n        return actorRepository.getActorByActorId(id);\n    }\n\n    public List<Actor> getActorsByFullName(String firstName, String lastName){\n        return actorRepository.findActorsByFirstNameAndLastName(firstName, lastName);\n    }\n\n    public List<Actor> getActorsByFirstName(String firstName){\n        return actorRepository.findActorsByFirstName(firstName);\n    }\n\n    public List<Actor> getActorsByLastName(String lastName){\n        return actorRepository.findActorsByLastName(lastName);\n    }\n\n    public String getActorFullNameFromID(Integer id){\n        Actor actor = getActorByID(id);\n        return actor.getFirstName() + \" \" + actor.getLastName();\n    }\n\n\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "ActorService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Actor",
      "com.sparta.engineering72.sakilaproject.respositories.ActorRepository",
      "org.springframework.stereotype.Service",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "actorRepository",
        "type": "ActorRepository"
      }
    ],
    "methods": [
      {
        "name": "getAllActors",
        "signature": "List getAllActors()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorByID",
        "signature": "Actor getActorByID(int id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "Actor",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorsByFullName",
        "signature": "List getActorsByFullName(String firstName, String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          },
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorsByFirstName",
        "signature": "List getActorsByFirstName(String firstName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorsByLastName",
        "signature": "List getActorsByLastName(String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getActorFullNameFromID",
        "signature": "String getActorFullNameFromID(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "String",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/services/FilmService.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.services;\n\nimport com.sparta.engineering72.sakilaproject.entities.Film;\nimport com.sparta.engineering72.sakilaproject.respositories.FilmRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class FilmService {\n\n    private final FilmRepository filmRepository;\n\n    public FilmService(FilmRepository filmRepository){\n        this.filmRepository = filmRepository;\n    }\n\n    public List<Film> getAllFilms(){\n        return filmRepository.findAll();\n    }\n\n    public Film getFilmByID(int id){\n        return filmRepository.getFilmByFilmId(id);\n    }\n\n    public List<Film> getFilmsByTitle(String title){\n        return filmRepository.findByTitle(title);\n    }\n\n    public List<Film> getAvailableFilms(){\n        return filmRepository.getAvailableFilms();\n    }\n\n    public Integer getAvailableFilmCount(Integer id){\n        return filmRepository.getAvailableFilmCount(id);\n    }\n\n    public List<Film> getFilmsByCategory(Integer id){\n        return filmRepository.getAllFilmsByCategory(id);\n    }\n\n    public List<Film> getFilmsByActor(Integer id){\n        return filmRepository.getAllFilmsByActor(id);\n    }\n\n    public void save(Film film) {\n        filmRepository.save(film);\n    }\n\n    public void deleteFilmById(int id) {\n        filmRepository.deleteById(id);\n    }\n\n}\n",
    "category": "Service",
    "package_name": "com.sparta.engineering72.sakilaproject.services",
    "class_name": "FilmService",
    "class_annotations": [
      "Service"
    ],
    "imports": [
      "com.sparta.engineering72.sakilaproject.entities.Film",
      "com.sparta.engineering72.sakilaproject.respositories.FilmRepository",
      "org.springframework.stereotype.Service",
      "org.springframework.transaction.annotation.Transactional",
      "java.util.ArrayList",
      "java.util.List"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmRepository",
        "type": "FilmRepository"
      }
    ],
    "methods": [
      {
        "name": "getAllFilms",
        "signature": "List getAllFilms()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmByID",
        "signature": "Film getFilmByID(int id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "Film",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmsByTitle",
        "signature": "List getFilmsByTitle(String title)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "title",
            "type": "String"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getAvailableFilms",
        "signature": "List getAvailableFilms()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getAvailableFilmCount",
        "signature": "Integer getAvailableFilmCount(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "Integer",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmsByCategory",
        "signature": "List getFilmsByCategory(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmsByActor",
        "signature": "List getFilmsByActor(Integer id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "Integer"
          }
        ],
        "return_type": "List",
        "method_body_raw_code": ""
      },
      {
        "name": "save",
        "signature": "void save(Film film)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "film",
            "type": "Film"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "deleteFilmById",
        "signature": "void deleteFilmById(int id)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "id",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Order.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\npublic class Order {\n    private Customer customer;\n    private Film film;\n    private Rental rental;\n\n    public Order(Customer customer, Film film, Rental rental) {\n        this.customer = customer;\n        this.film = film;\n        this.rental = rental;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public void setCustomer(Customer customer) {\n        this.customer = customer;\n    }\n\n    public Film getFilm() {\n        return film;\n    }\n\n    public void setFilm(Film film) {\n        this.film = film;\n    }\n\n    public Rental getRental() {\n        return rental;\n    }\n\n    public void setRental(Rental rental) {\n        this.rental = rental;\n    }\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Order",
    "class_annotations": [],
    "imports": [],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "customer",
        "type": "Customer"
      },
      {
        "name": "film",
        "type": "Film"
      },
      {
        "name": "rental",
        "type": "Rental"
      }
    ],
    "methods": [
      {
        "name": "getCustomer",
        "signature": "Customer getCustomer()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "Customer",
        "method_body_raw_code": ""
      },
      {
        "name": "setCustomer",
        "signature": "void setCustomer(Customer customer)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "customer",
            "type": "Customer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilm",
        "signature": "Film getFilm()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "Film",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilm",
        "signature": "void setFilm(Film film)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "film",
            "type": "Film"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getRental",
        "signature": "Rental getRental()",
        "method_annotations": [],
        "parameters": [],
        "return_type": "Rental",
        "method_body_raw_code": ""
      },
      {
        "name": "setRental",
        "signature": "void setRental(Rental rental)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "rental",
            "type": "Rental"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Film.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport javax.persistence.*;\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;\nimport java.time.LocalDate;\nimport java.util.Objects;\n\n@Entity\npublic class Film {\n    private int filmId;\n    private String title;\n    private String description;\n    private int releaseYear;\n    private Integer rentalDuration;\n    private BigDecimal rentalRate;\n    private Integer length;\n    private BigDecimal replacementCost;\n    private String rating;\n    private String specialFeatures;\n    private Timestamp lastUpdate;\n\n    @Id\n    @Column(name = \"film_id\")\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(int filmId) {\n        this.filmId = filmId;\n    }\n\n    @Basic\n    @Column(name = \"title\")\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    @Basic\n    @Column(name = \"description\")\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Basic\n    @Column(name = \"release_year\")\n    public int getReleaseYear() {\n        return releaseYear;\n    }\n\n    public void setReleaseYear(int releaseYear) {\n        this.releaseYear = releaseYear;\n    }\n\n    @Basic\n    @Column(name = \"rental_duration\")\n    public Integer getRentalDuration() {\n        return rentalDuration;\n    }\n\n    public void setRentalDuration(Integer rentalDuration) {\n        this.rentalDuration = rentalDuration;\n    }\n\n    @Basic\n    @Column(name = \"rental_rate\")\n    public BigDecimal getRentalRate() {\n        return rentalRate;\n    }\n\n    public void setRentalRate(BigDecimal rentalRate) {\n        this.rentalRate = rentalRate;\n    }\n\n    @Basic\n    @Column(name = \"length\")\n    public Integer getLength() {\n        return length;\n    }\n\n    public void setLength(Integer length) {\n        this.length = length;\n    }\n\n    @Basic\n    @Column(name = \"replacement_cost\")\n    public BigDecimal getReplacementCost() {\n        return replacementCost;\n    }\n\n    public void setReplacementCost(BigDecimal replacementCost) {\n        this.replacementCost = replacementCost;\n    }\n\n    @Basic\n    @Column(name = \"rating\")\n    public String getRating() {\n        return rating;\n    }\n\n    public void setRating(String rating) {\n        this.rating = rating;\n    }\n\n    @Basic\n    @Column(name = \"special_features\")\n    public String getSpecialFeatures() {\n        return specialFeatures;\n    }\n\n    public void setSpecialFeatures(String specialFeatures) {\n        this.specialFeatures = specialFeatures;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Film film = (Film) o;\n        return filmId == film.filmId &&\n                Objects.equals(title, film.title) &&\n                Objects.equals(description, film.description) &&\n                Objects.equals(releaseYear, film.releaseYear) &&\n                Objects.equals(rentalDuration, film.rentalDuration) &&\n                Objects.equals(rentalRate, film.rentalRate) &&\n                Objects.equals(length, film.length) &&\n                Objects.equals(replacementCost, film.replacementCost) &&\n                Objects.equals(rating, film.rating) &&\n                Objects.equals(specialFeatures, film.specialFeatures) &&\n                Objects.equals(lastUpdate, film.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(filmId, title, description, releaseYear, rentalDuration, rentalRate, length, replacementCost, rating, specialFeatures, lastUpdate);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Film",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "org.springframework.format.annotation.DateTimeFormat",
      "javax.persistence",
      "java.math.BigDecimal",
      "java.sql.Timestamp",
      "java.time.LocalDate",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmId",
        "type": "int"
      },
      {
        "name": "title",
        "type": "String"
      },
      {
        "name": "description",
        "type": "String"
      },
      {
        "name": "releaseYear",
        "type": "int"
      },
      {
        "name": "rentalDuration",
        "type": "Integer"
      },
      {
        "name": "rentalRate",
        "type": "BigDecimal"
      },
      {
        "name": "length",
        "type": "Integer"
      },
      {
        "name": "replacementCost",
        "type": "BigDecimal"
      },
      {
        "name": "rating",
        "type": "String"
      },
      {
        "name": "specialFeatures",
        "type": "String"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(int filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getTitle",
        "signature": "String getTitle()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setTitle",
        "signature": "void setTitle(String title)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "title",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getDescription",
        "signature": "String getDescription()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setDescription",
        "signature": "void setDescription(String description)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "description",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getReleaseYear",
        "signature": "int getReleaseYear()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setReleaseYear",
        "signature": "void setReleaseYear(int releaseYear)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "releaseYear",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getRentalDuration",
        "signature": "Integer getRentalDuration()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      },
      {
        "name": "setRentalDuration",
        "signature": "void setRentalDuration(Integer rentalDuration)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "rentalDuration",
            "type": "Integer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getRentalRate",
        "signature": "BigDecimal getRentalRate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "BigDecimal",
        "method_body_raw_code": ""
      },
      {
        "name": "setRentalRate",
        "signature": "void setRentalRate(BigDecimal rentalRate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "rentalRate",
            "type": "BigDecimal"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLength",
        "signature": "Integer getLength()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      },
      {
        "name": "setLength",
        "signature": "void setLength(Integer length)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "length",
            "type": "Integer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getReplacementCost",
        "signature": "BigDecimal getReplacementCost()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "BigDecimal",
        "method_body_raw_code": ""
      },
      {
        "name": "setReplacementCost",
        "signature": "void setReplacementCost(BigDecimal replacementCost)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "replacementCost",
            "type": "BigDecimal"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getRating",
        "signature": "String getRating()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setRating",
        "signature": "void setRating(String rating)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "rating",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getSpecialFeatures",
        "signature": "String getSpecialFeatures()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setSpecialFeatures",
        "signature": "void setSpecialFeatures(String specialFeatures)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "specialFeatures",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Customer.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.Basic;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport java.sql.Timestamp;\nimport java.util.Objects;\n\n@Entity\npublic class Customer {\n    private int customerId;\n    private String firstName;\n    private String lastName;\n    private String email;\n    private byte active;\n    private Timestamp createDate;\n    private Timestamp lastUpdate;\n\n    @Id\n    @Column(name = \"customer_id\")\n    public int getCustomerId() {\n        return customerId;\n    }\n\n    public void setCustomerId(int customerId) {\n        this.customerId = customerId;\n    }\n\n    @Basic\n    @Column(name = \"first_name\")\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    @Basic\n    @Column(name = \"last_name\")\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    @Basic\n    @Column(name = \"email\")\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    @Basic\n    @Column(name = \"active\")\n    public byte getActive() {\n        return active;\n    }\n\n    public void setActive(byte active) {\n        this.active = active;\n    }\n\n    @Basic\n    @Column(name = \"create_date\")\n    public Timestamp getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Timestamp createDate) {\n        this.createDate = createDate;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Customer customer = (Customer) o;\n        return customerId == customer.customerId &&\n                active == customer.active &&\n                Objects.equals(firstName, customer.firstName) &&\n                Objects.equals(lastName, customer.lastName) &&\n                Objects.equals(email, customer.email) &&\n                Objects.equals(createDate, customer.createDate) &&\n                Objects.equals(lastUpdate, customer.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(customerId, firstName, lastName, email, active, createDate, lastUpdate);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Customer",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "javax.persistence.Basic",
      "javax.persistence.Column",
      "javax.persistence.Entity",
      "javax.persistence.Id",
      "java.sql.Timestamp",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "customerId",
        "type": "int"
      },
      {
        "name": "firstName",
        "type": "String"
      },
      {
        "name": "lastName",
        "type": "String"
      },
      {
        "name": "email",
        "type": "String"
      },
      {
        "name": "active",
        "type": "byte"
      },
      {
        "name": "createDate",
        "type": "Timestamp"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getCustomerId",
        "signature": "int getCustomerId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setCustomerId",
        "signature": "void setCustomerId(int customerId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "customerId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFirstName",
        "signature": "String getFirstName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setFirstName",
        "signature": "void setFirstName(String firstName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastName",
        "signature": "String getLastName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastName",
        "signature": "void setLastName(String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getEmail",
        "signature": "String getEmail()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setEmail",
        "signature": "void setEmail(String email)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "email",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getActive",
        "signature": "byte getActive()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "byte",
        "method_body_raw_code": ""
      },
      {
        "name": "setActive",
        "signature": "void setActive(byte active)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "active",
            "type": "byte"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getCreateDate",
        "signature": "Timestamp getCreateDate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setCreateDate",
        "signature": "void setCreateDate(Timestamp createDate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "createDate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Inventory.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.sql.Timestamp;\nimport java.util.Objects;\n\n@Entity\npublic class Inventory {\n    private int inventoryId;\n    private int filmId;\n    private Timestamp lastUpdate;\n\n    @Id\n    @Column(name = \"inventory_id\")\n    public int getInventoryId() {\n        return inventoryId;\n    }\n\n    public void setInventoryId(int inventoryId) {\n        this.inventoryId = inventoryId;\n    }\n\n    @Column(name = \"film_id\")\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(int filmId) {\n        this.filmId = filmId;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Inventory inventory = (Inventory) o;\n        return inventoryId == inventory.inventoryId &&\n                Objects.equals(lastUpdate, inventory.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(inventoryId, lastUpdate);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Inventory",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "javax.persistence",
      "java.sql.Timestamp",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "inventoryId",
        "type": "int"
      },
      {
        "name": "filmId",
        "type": "int"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getInventoryId",
        "signature": "int getInventoryId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setInventoryId",
        "signature": "void setInventoryId(int inventoryId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "inventoryId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(int filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmActorPK.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.Column;\nimport javax.persistence.Id;\nimport java.io.Serializable;\nimport java.util.Objects;\n\npublic class FilmActorPK implements Serializable {\n    private int actorId;\n    private int filmId;\n\n    @Column(name = \"actor_id\")\n    @Id\n    public Integer getActorId() {\n        return actorId;\n    }\n\n    public void setActorId(int actorId) {\n        this.actorId = actorId;\n    }\n\n    @Column(name = \"film_id\")\n    @Id\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(int filmId) {\n        this.filmId = filmId;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FilmActorPK that = (FilmActorPK) o;\n        return actorId == that.actorId &&\n                filmId == that.filmId;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(actorId, filmId);\n    }\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "FilmActorPK",
    "class_annotations": [],
    "imports": [
      "javax.persistence.Column",
      "javax.persistence.Id",
      "java.io.Serializable",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [
      "Serializable"
    ],
    "fields": [
      {
        "name": "actorId",
        "type": "int"
      },
      {
        "name": "filmId",
        "type": "int"
      }
    ],
    "methods": [
      {
        "name": "getActorId",
        "signature": "Integer getActorId()",
        "method_annotations": [
          "Column",
          "Id"
        ],
        "parameters": [],
        "return_type": "Integer",
        "method_body_raw_code": ""
      },
      {
        "name": "setActorId",
        "signature": "void setActorId(int actorId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "actorId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Column",
          "Id"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(int filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Category.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.sql.Timestamp;\nimport java.util.Collection;\nimport java.util.Objects;\n\n@Entity\npublic class Category {\n    private int categoryId;\n    private String name;\n    private Timestamp lastUpdate;\n\n    @Id\n    @Column(name = \"category_id\")\n    public int getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(int categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    @Basic\n    @Column(name = \"name\")\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Category category = (Category) o;\n        return categoryId == category.categoryId &&\n                Objects.equals(name, category.name) &&\n                Objects.equals(lastUpdate, category.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(categoryId, name, lastUpdate);\n    }\n\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Category",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "javax.persistence",
      "java.sql.Timestamp",
      "java.util.Collection",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "categoryId",
        "type": "int"
      },
      {
        "name": "name",
        "type": "String"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getCategoryId",
        "signature": "int getCategoryId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setCategoryId",
        "signature": "void setCategoryId(int categoryId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "categoryId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getName",
        "signature": "String getName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setName",
        "signature": "void setName(String name)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "name",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmCategoryPK.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.Column;\nimport javax.persistence.Id;\nimport java.io.Serializable;\nimport java.util.Objects;\n\npublic class FilmCategoryPK implements Serializable {\n    private int filmId;\n    private int categoryId;\n\n    @Column(name = \"film_id\")\n    @Id\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(int filmId) {\n        this.filmId = filmId;\n    }\n\n    @Column(name = \"category_id\")\n    @Id\n    public int getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(int categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FilmCategoryPK that = (FilmCategoryPK) o;\n        return filmId == that.filmId &&\n                categoryId == that.categoryId;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(filmId, categoryId);\n    }\n}\n",
    "category": "Other",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "FilmCategoryPK",
    "class_annotations": [],
    "imports": [
      "javax.persistence.Column",
      "javax.persistence.Id",
      "java.io.Serializable",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [
      "Serializable"
    ],
    "fields": [
      {
        "name": "filmId",
        "type": "int"
      },
      {
        "name": "categoryId",
        "type": "int"
      }
    ],
    "methods": [
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Column",
          "Id"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(int filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getCategoryId",
        "signature": "int getCategoryId()",
        "method_annotations": [
          "Column",
          "Id"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setCategoryId",
        "signature": "void setCategoryId(int categoryId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "categoryId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmActor.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.sql.Timestamp;\nimport java.util.Objects;\n\n@Entity\n@Table(name = \"film_actor\", schema = \"sakila\", catalog = \"\")\n@IdClass(FilmActorPK.class)\npublic class FilmActor {\n    private int actorId;\n    private int filmId;\n    private Timestamp lastUpdate;\n\n\n    @Id\n    @Column(name = \"actor_id\")\n    public int getActorId() {\n        return actorId;\n    }\n\n    public void setActorId(int actorId) {\n        this.actorId = actorId;\n    }\n\n    @Id\n    @Column(name = \"film_id\")\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(int filmId) {\n        this.filmId = filmId;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FilmActor filmActor = (FilmActor) o;\n        return actorId == filmActor.actorId &&\n                filmId == filmActor.filmId &&\n                Objects.equals(lastUpdate, filmActor.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(actorId, filmId, lastUpdate);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "FilmActor",
    "class_annotations": [
      "Entity",
      "Table",
      "IdClass"
    ],
    "imports": [
      "javax.persistence",
      "java.sql.Timestamp",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "actorId",
        "type": "int"
      },
      {
        "name": "filmId",
        "type": "int"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getActorId",
        "signature": "int getActorId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setActorId",
        "signature": "void setActorId(int actorId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "actorId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(int filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmCategory.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.sql.Timestamp;\nimport java.util.Objects;\n\n@Entity\n@Table(name = \"film_category\", schema = \"sakila\", catalog = \"\")\n@IdClass(FilmCategoryPK.class)\npublic class FilmCategory {\n    private int filmId;\n    private int categoryId;\n    private Timestamp lastUpdate;\n\n\n    @Id\n    @Column(name = \"film_id\")\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(Integer filmId) {\n        this.filmId = filmId;\n    }\n\n    @Id\n    @Column(name = \"category_id\")\n    public int getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(Integer categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FilmCategory that = (FilmCategory) o;\n        return filmId == that.filmId &&\n                categoryId == that.categoryId &&\n                Objects.equals(lastUpdate, that.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(filmId, categoryId, lastUpdate);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "FilmCategory",
    "class_annotations": [
      "Entity",
      "Table",
      "IdClass"
    ],
    "imports": [
      "javax.persistence",
      "java.sql.Timestamp",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmId",
        "type": "int"
      },
      {
        "name": "categoryId",
        "type": "int"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(Integer filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "Integer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getCategoryId",
        "signature": "int getCategoryId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setCategoryId",
        "signature": "void setCategoryId(Integer categoryId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "categoryId",
            "type": "Integer"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Actor.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.sql.Timestamp;\nimport java.util.Collection;\nimport java.util.Objects;\n\n@Entity\npublic class Actor {\n    private int actorId;\n    private String firstName;\n    private String lastName;\n    private Timestamp lastUpdate;\n\n    @Id\n    @Column(name = \"actor_id\")\n    public int getActorId() {\n        return actorId;\n    }\n\n    public void setActorId(int actorId) {\n        this.actorId = actorId;\n    }\n\n    @Basic\n    @Column(name = \"first_name\")\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    @Basic\n    @Column(name = \"last_name\")\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Actor actor = (Actor) o;\n        return actorId == actor.actorId &&\n                Objects.equals(firstName, actor.firstName) &&\n                Objects.equals(lastName, actor.lastName) &&\n                Objects.equals(lastUpdate, actor.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(actorId, firstName, lastName, lastUpdate);\n    }\n\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Actor",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "javax.persistence",
      "java.sql.Timestamp",
      "java.util.Collection",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "actorId",
        "type": "int"
      },
      {
        "name": "firstName",
        "type": "String"
      },
      {
        "name": "lastName",
        "type": "String"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getActorId",
        "signature": "int getActorId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setActorId",
        "signature": "void setActorId(int actorId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "actorId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFirstName",
        "signature": "String getFirstName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setFirstName",
        "signature": "void setFirstName(String firstName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastName",
        "signature": "String getLastName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastName",
        "signature": "void setLastName(String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Staff.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.Basic;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport java.sql.Timestamp;\nimport java.util.Arrays;\nimport java.util.Objects;\n\n@Entity\npublic class Staff {\n    private int staffId;\n    private String firstName;\n    private String lastName;\n    private byte[] picture;\n    private String email;\n    private byte active;\n    private String username;\n    private String password;\n    private Timestamp lastUpdate;\n\n    @Id\n    @Column(name = \"staff_id\")\n    public int getStaffId() {\n        return staffId;\n    }\n\n    public void setStaffId(int staffId) {\n        this.staffId = staffId;\n    }\n\n    @Basic\n    @Column(name = \"first_name\")\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    @Basic\n    @Column(name = \"last_name\")\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    @Basic\n    @Column(name = \"picture\")\n    public byte[] getPicture() {\n        return picture;\n    }\n\n    public void setPicture(byte[] picture) {\n        this.picture = picture;\n    }\n\n    @Basic\n    @Column(name = \"email\")\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    @Basic\n    @Column(name = \"active\")\n    public byte getActive() {\n        return active;\n    }\n\n    public void setActive(byte active) {\n        this.active = active;\n    }\n\n    @Basic\n    @Column(name = \"username\")\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Basic\n    @Column(name = \"password\")\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Staff staff = (Staff) o;\n        return staffId == staff.staffId &&\n                active == staff.active &&\n                Objects.equals(firstName, staff.firstName) &&\n                Objects.equals(lastName, staff.lastName) &&\n                Arrays.equals(picture, staff.picture) &&\n                Objects.equals(email, staff.email) &&\n                Objects.equals(username, staff.username) &&\n                Objects.equals(password, staff.password) &&\n                Objects.equals(lastUpdate, staff.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = Objects.hash(staffId, firstName, lastName, email, active, username, password, lastUpdate);\n        result = 31 * result + Arrays.hashCode(picture);\n        return result;\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Staff",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "javax.persistence.Basic",
      "javax.persistence.Column",
      "javax.persistence.Entity",
      "javax.persistence.Id",
      "java.sql.Timestamp",
      "java.util.Arrays",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "staffId",
        "type": "int"
      },
      {
        "name": "firstName",
        "type": "String"
      },
      {
        "name": "lastName",
        "type": "String"
      },
      {
        "name": "picture",
        "type": "byte"
      },
      {
        "name": "email",
        "type": "String"
      },
      {
        "name": "active",
        "type": "byte"
      },
      {
        "name": "username",
        "type": "String"
      },
      {
        "name": "password",
        "type": "String"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      }
    ],
    "methods": [
      {
        "name": "getStaffId",
        "signature": "int getStaffId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setStaffId",
        "signature": "void setStaffId(int staffId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "staffId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getFirstName",
        "signature": "String getFirstName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setFirstName",
        "signature": "void setFirstName(String firstName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "firstName",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastName",
        "signature": "String getLastName()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastName",
        "signature": "void setLastName(String lastName)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastName",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getPicture",
        "signature": "byte getPicture()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "byte",
        "method_body_raw_code": ""
      },
      {
        "name": "setPicture",
        "signature": "void setPicture(byte picture)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "picture",
            "type": "byte"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getEmail",
        "signature": "String getEmail()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setEmail",
        "signature": "void setEmail(String email)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "email",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getActive",
        "signature": "byte getActive()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "byte",
        "method_body_raw_code": ""
      },
      {
        "name": "setActive",
        "signature": "void setActive(byte active)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "active",
            "type": "byte"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getUsername",
        "signature": "String getUsername()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setUsername",
        "signature": "void setUsername(String username)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "username",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getPassword",
        "signature": "String getPassword()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setPassword",
        "signature": "void setPassword(String password)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "password",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/Rental.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.sql.Timestamp;\nimport java.util.Objects;\n\n@Entity\npublic class Rental {\n    private int rentalId;\n    private Timestamp rentalDate;\n    private int inventoryId;\n    private int customerId;\n    private Timestamp returnDate;\n    private Timestamp lastUpdate;\n    private int staffId;\n\n    @Id\n    @Column(name = \"rental_id\")\n    public int getRentalId() {\n        return rentalId;\n    }\n\n    public void setRentalId(int rentalId) {\n        this.rentalId = rentalId;\n    }\n\n    @Basic\n    @Column(name = \"rental_date\")\n    public Timestamp getRentalDate() {\n        return rentalDate;\n    }\n\n    public void setRentalDate(Timestamp rentalDate) {\n        this.rentalDate = rentalDate;\n    }\n\n\n    @Basic\n    @Column(name = \"inventory_id\")\n    public int getInventoryId() {\n        return inventoryId;\n    }\n\n    public void setInventoryId(int inventoryId) {\n        this.inventoryId = inventoryId;\n    }\n\n    @Basic\n    @Column(name = \"customer_id\")\n    public int getCustomerId() {\n        return customerId;\n    }\n\n    public void setCustomerId(int customerId) {\n        this.customerId = customerId;\n    }\n\n    @Basic\n    @Column(name = \"return_date\")\n    public Timestamp getReturnDate() {\n        return returnDate;\n    }\n\n    public void setReturnDate(Timestamp returnDate) {\n        this.returnDate = returnDate;\n    }\n\n    @Basic\n    @Column(name = \"staff_id\")\n    public int getStaffId() {\n        return staffId;\n    }\n\n    public void setStaffId(int staffId) {\n        this.staffId = staffId;\n    }\n\n    @Basic\n    @Column(name = \"last_update\")\n    public Timestamp getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public void setLastUpdate(Timestamp lastUpdate) {\n        this.lastUpdate = lastUpdate;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Rental rental = (Rental) o;\n        return rentalId == rental.rentalId &&\n                inventoryId == rental.inventoryId &&\n                customerId == rental.customerId &&\n                staffId == rental.staffId &&\n                Objects.equals(rentalDate, rental.rentalDate) &&\n                Objects.equals(returnDate, rental.returnDate) &&\n                Objects.equals(lastUpdate, rental.lastUpdate);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(rentalId, inventoryId, customerId, staffId, rentalDate, returnDate, lastUpdate);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "Rental",
    "class_annotations": [
      "Entity"
    ],
    "imports": [
      "javax.persistence",
      "java.sql.Timestamp",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "rentalId",
        "type": "int"
      },
      {
        "name": "rentalDate",
        "type": "Timestamp"
      },
      {
        "name": "inventoryId",
        "type": "int"
      },
      {
        "name": "customerId",
        "type": "int"
      },
      {
        "name": "returnDate",
        "type": "Timestamp"
      },
      {
        "name": "lastUpdate",
        "type": "Timestamp"
      },
      {
        "name": "staffId",
        "type": "int"
      }
    ],
    "methods": [
      {
        "name": "getRentalId",
        "signature": "int getRentalId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setRentalId",
        "signature": "void setRentalId(int rentalId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "rentalId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getRentalDate",
        "signature": "Timestamp getRentalDate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setRentalDate",
        "signature": "void setRentalDate(Timestamp rentalDate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "rentalDate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getInventoryId",
        "signature": "int getInventoryId()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setInventoryId",
        "signature": "void setInventoryId(int inventoryId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "inventoryId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getCustomerId",
        "signature": "int getCustomerId()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setCustomerId",
        "signature": "void setCustomerId(int customerId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "customerId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getReturnDate",
        "signature": "Timestamp getReturnDate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setReturnDate",
        "signature": "void setReturnDate(Timestamp returnDate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "returnDate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getStaffId",
        "signature": "int getStaffId()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setStaffId",
        "signature": "void setStaffId(int staffId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "staffId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getLastUpdate",
        "signature": "Timestamp getLastUpdate()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "Timestamp",
        "method_body_raw_code": ""
      },
      {
        "name": "setLastUpdate",
        "signature": "void setLastUpdate(Timestamp lastUpdate)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "lastUpdate",
            "type": "Timestamp"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  },
  {
    "file_path": "SakilaProject_Cloned/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmText.java",
    "raw_content": "package com.sparta.engineering72.sakilaproject.entities;\n\nimport javax.persistence.*;\nimport java.util.Objects;\n\n@Entity\n@Table(name = \"film_text\", schema = \"sakila\")\npublic class FilmText {\n    private int filmId;\n    private String title;\n    private String description;\n\n    @Id\n    @Column(name = \"film_id\")\n    public int getFilmId() {\n        return filmId;\n    }\n\n    public void setFilmId(int filmId) {\n        this.filmId = filmId;\n    }\n\n    @Basic\n    @Column(name = \"title\")\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    @Basic\n    @Column(name = \"description\")\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        FilmText filmText = (FilmText) o;\n        return filmId == filmText.filmId &&\n                Objects.equals(title, filmText.title) &&\n                Objects.equals(description, filmText.description);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(filmId, title, description);\n    }\n}\n",
    "category": "Entity",
    "package_name": "com.sparta.engineering72.sakilaproject.entities",
    "class_name": "FilmText",
    "class_annotations": [
      "Entity",
      "Table"
    ],
    "imports": [
      "javax.persistence",
      "java.util.Objects"
    ],
    "extends": null,
    "implements": [],
    "fields": [
      {
        "name": "filmId",
        "type": "int"
      },
      {
        "name": "title",
        "type": "String"
      },
      {
        "name": "description",
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getFilmId",
        "signature": "int getFilmId()",
        "method_annotations": [
          "Id",
          "Column"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      },
      {
        "name": "setFilmId",
        "signature": "void setFilmId(int filmId)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "filmId",
            "type": "int"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getTitle",
        "signature": "String getTitle()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setTitle",
        "signature": "void setTitle(String title)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "title",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "getDescription",
        "signature": "String getDescription()",
        "method_annotations": [
          "Basic",
          "Column"
        ],
        "parameters": [],
        "return_type": "String",
        "method_body_raw_code": ""
      },
      {
        "name": "setDescription",
        "signature": "void setDescription(String description)",
        "method_annotations": [],
        "parameters": [
          {
            "name": "description",
            "type": "String"
          }
        ],
        "return_type": "void",
        "method_body_raw_code": ""
      },
      {
        "name": "equals",
        "signature": "boolean equals(Object o)",
        "method_annotations": [
          "Override"
        ],
        "parameters": [
          {
            "name": "o",
            "type": "Object"
          }
        ],
        "return_type": "boolean",
        "method_body_raw_code": ""
      },
      {
        "name": "hashCode",
        "signature": "int hashCode()",
        "method_annotations": [
          "Override"
        ],
        "parameters": [],
        "return_type": "int",
        "method_body_raw_code": ""
      }
    ]
  }
]